// -----------------------------------------------------------------------------
// This file was automatically generated.
// Please do not edit this file manually.
//
// Generated Date: 
//
// -----------------------------------------------------------------------------

using Microsoft.AspNetCore.Mvc;
using Serilog;
using iSoft.Common.Exceptions;
using iSoft.Common;
using Microsoft.Extensions.Logging;
using iSoft.Common.Models.RequestModels;
using iSoft.AspNetCore.CommonFunc;
using iSoft.Common.Models.ResponseModel;
using SourceBaseBE.Database.Entities;
using SourceBaseBE.MainService.Services;
using iSoft.AspNetCore.Controllers.Base.BaseCRUD;
using System;
using iSoft.Database.Models.RequestModels.Base.BaseCRUD;
using iSoft.Database.Models.ResponseModels.Base.BaseCRUD;
using iSoft.AspNetCore.Services;
using SourceBaseBE.Database.Models.RequestModels;
using SourceBaseBE.Database.Models.ResponseModels;

namespace SourceBaseBE.MainService.Controllers
{
    [ApiController]
    [Route("api/v1/BasePlc")]
    public class BasePlcController : BaseCRUDController<PlcEntity, PlcRequestModel, PlcResponseModel>
    {
        protected BasePlcService _serviceBase;

        public BasePlcController(
            BasePlcService service,
            ILogger<BasePlcController> logger
            )
          : base(service, logger)
        {
            _serviceCRUD = service;
            _serviceBase = (BasePlcService)_serviceCRUD;
        }

        public BasePlcController(
            BasePlcService service,
            ILogger<BasePlcController> logger,
            LanguageSystemService languageService
            )
          : base(service, logger, languageService)
        {
            _serviceCRUD = service;
            _serviceBase = (BasePlcService)_serviceCRUD;
        }

        //* multiLanguage flag
        public override bool IsMultiLanguage
        {
            get { return false; }
        }

        [HttpGet]
        [Route("get-list-filter")]
        public virtual IActionResult GetListFilter([FromQuery] PagingFilterRequestModel request)
        {
            string funcName = nameof(GetListFilter);

            try
            {
                this._logger.LogMsg(Messages.IFuncStart_0, funcName);

                PagingWithColumnsResponseModel result = new PagingWithColumnsResponseModel();

                var currentUserId = CommonFunction.GetCurrentUserId(this.HttpContext);

                result = _serviceBase.GetListFilter(request);

                if (result == null)
                {
                    this._logger.LogMsg(Messages.ISuccess_0_1, funcName, result);
                    return this.ResponseError(null);
                }

                this._logger.LogMsg(Messages.ISuccess_0_1, funcName, result);
                return this.ResponseJSonObj(result);
            }
            catch (Exception ex)
            {
                var errMessage = Messages.ErrException.SetParameters(ex);
                this._logger.LogMsg(errMessage);
                return this.ResponseError(errMessage);
            }
        }

        [HttpGet]
        [Route("export-data")]
        public virtual IActionResult ExportReport([FromQuery] PagingFilterRequestModel request)
        {
            string funcName = nameof(ExportReport);
            Messages.Message errMessage = null;

            try
            {
                this._logger.LogMsg(Messages.IFuncStart_0, funcName);

                var ret = _serviceBase.ExportData(request);
                this._logger.LogMsg(Messages.ISuccess_0_1, funcName, "Export successfully");

                return DownloadFile(ret, true);
            }
            catch (DBException ex)
            {
                errMessage = Messages.ErrDBException.SetParameters(ex);
            }
            catch (BaseException ex)
            {
                errMessage = Messages.ErrBaseException.SetParameters(ex);
            }
            catch (Exception ex)
            {
                errMessage = Messages.ErrException.SetParameters(ex);
            }
            this._logger.LogMsg(errMessage);
            return this.ResponseError(errMessage);
        }

        [HttpGet]
        [Route("get-list-option-filter")]
        public virtual IActionResult GetListOptionFilter()
        {
            string funcName = nameof(GetListOptionFilter);
            Messages.Message errMessage = null;
            try
            {
                this._logger.LogMsg(Messages.IFuncStart_0, funcName);
                var ret = this._serviceBase.GetListOptionFilter();
                this._logger.LogMsg(Messages.ISuccess_0_1, funcName, ret);

                return this.ResponseJSonObj(ret);
            }
            catch (BaseException ex)
            {
                errMessage = Messages.ErrBaseException.SetParameters(ex);
            }
            catch (Exception ex)
            {
                errMessage = Messages.ErrException.SetParameters(ex);
            }
            this._logger.LogMsg(errMessage);
            return this.ResponseError(errMessage);
        }
    }
}