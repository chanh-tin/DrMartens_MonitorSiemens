// -----------------------------------------------------------------------------
// This file was automatically generated.
// Please do not edit this file manually.
//
// Generated Date: 
//
// -----------------------------------------------------------------------------

using iSoft.Common.Utils;
using Microsoft.AspNetCore.Http;
using SourceBaseBE.Database.Entities;
using static iSoft.Common.ConstCommon;
using iSoft.Common;
using iSoft.Database.Models.RequestModels.Base.BaseCRUD;
using SourceBaseBE.Database.Enums;
using iSoft.Common.Enums;

namespace SourceBaseBE.Database.Models.RequestModels
{
    public class BaseExample001RequestModel : BaseCRUDRequestModel<Example001Entity>
    {
        //public virtual string SerialCode { get; set; }
        public virtual string Name { get; set; }
        public virtual string NameReadonly { get; set; }
        public virtual string Username { get; set; }
        public virtual string? Description { get; set; }
        public virtual string? Label1 { get; set; }
        public virtual string? Password1 { get; set; }
        public virtual string? Password2 { get; set; }
        public virtual string? Email1 { get; set; }
        public virtual string? PhoneNumber1 { get; set; }

        protected DateTime? _startDate { get; set; }
        public virtual string? StartDate
        {
            get
            {
                if (_startDate.HasValue)
                {
                    return _startDate.Value.ToString(ConstDateTimeFormat.YYYYMMDD);
                }
                return null;
            }
            set
            {
                if (!string.IsNullOrEmpty(value))
                {
                    try
                    {
                        _startDate = DateTimeUtil.GetDateTimeFromString(value, ConstDateTimeFormat.YYYYMMDD);
                    }
                    catch
                    {
                        _startDate = null;
                    }
                }
            }
        }
        public virtual DateTime? StartDateTime { get; set; }
        public virtual string? TimeOnlyData { get; set; }
        public virtual int? RefreshTime1 { get; set; }
        public virtual int? RefreshTime2 { get; set; }
        public virtual int? RefreshTime3 { get; set; }
        public virtual int? RefreshTime4 { get; set; }

        string? _refreshTime5 { get; set; }
        public virtual string[]? RefreshTime5
        {
            get
            {
                if (_refreshTime5 != null)
                {
                    return _refreshTime5.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _refreshTime5 = string.Join(",", value);
                    }
                    catch
                    {
                        _refreshTime5 = null;
                    }
                }
                else
                {
                    _refreshTime5 = null;
                }
            }
        }
        public virtual double? Price { get; set; }
        public virtual int? Gender { get; set; }
        public virtual bool? Enable { get; set; }

        string? _checkBoxValues { get; set; }
        public virtual string[]? CheckBoxValues
        {
            get
            {
                if (_checkBoxValues != null)
                {
                    return _checkBoxValues.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _checkBoxValues = string.Join(",", value);
                    }
                    catch
                    {
                        _checkBoxValues = null;
                    }
                }
                else
                {
                    _checkBoxValues = null;
                }
            }
        }
        public virtual IFormFile? Avatar { get; set; }
        public virtual IFormFile[]? ListImage1 { get; set; }
        public virtual IFormFile? File1 { get; set; }
        public virtual IFormFile[]? ListFile1 { get; set; }
        public virtual long? Example002Id { get; set; }
        public virtual List<long>? ListExample003 { get; set; }
        public virtual List<long>? ListExample001Trans { get; set; }
        
        public override Example001Entity GetEntity(Example001Entity entity)
        {
            if (this.Id != null) entity.Id = (long)this.Id;
            if (this.Order != null) entity.Order = this.Order;
            //if (this.SerialCode != null) entity.SerialCode = this.SerialCode;
            if (this.Name != null) entity.Name = this.Name;
            if (this.NameReadonly != null) entity.NameReadonly = this.NameReadonly;
            if (this.Username != null) entity.Username = this.Username;
            if (this.Description != null) entity.Description = this.Description;
            if (this.Label1 != null) entity.Label1 = this.Label1;
            if (!string.IsNullOrEmpty(this.Password1))
            {
                entity.Password1 = EncodeUtil.EncodePassword(this.Password1, this.Username);
            }
            if (!string.IsNullOrEmpty(this.Password2))
            {
                entity.Password2 = EncodeUtil.EncodePassword(this.Password2, this.Username);
            }
            if (this.Email1 != null) entity.Email1 = this.Email1;
            if (this.PhoneNumber1 != null) entity.PhoneNumber1 = this.PhoneNumber1;
            if (this._startDate != null) entity.StartDate = this._startDate;
            if (this.StartDateTime != null) entity.StartDateTime = this.StartDateTime;
            if (this.TimeOnlyData != null) entity.TimeOnlyData = this.TimeOnlyData;
            if (this.RefreshTime1 != null) entity.RefreshTime1 = this.RefreshTime1;
            if (this.RefreshTime2 != null) entity.RefreshTime2 = this.RefreshTime2;
            if (this.RefreshTime3 != null) entity.RefreshTime3 = this.RefreshTime3;
            if (this.RefreshTime4 != null) entity.RefreshTime4 = this.RefreshTime4;
            if (this._refreshTime5 != null) entity.RefreshTime5 = this._refreshTime5;
            if (this.Price != null) entity.Price = this.Price;
            if (this.Gender != null) entity.Gender = this.Gender;
            if (this.Enable != null) entity.Enable = this.Enable;
            if (this._checkBoxValues != null) entity.CheckBoxValues = this._checkBoxValues;
            if (this.Example002Id != null) entity.Example002Id = this.Example002Id;
            if (this.ListExample003 != null)
            {
                entity.Example003Ids = this.ListExample003;
            }
            if (this.ListExample001Trans != null)
            {
                entity.Example001TransIds = this.ListExample001Trans;
            }
        
            return entity;
        }

        public override Dictionary<string, (string, IFormFile)> GetFiles()
        {
            Dictionary<string, (string, IFormFile)> dicRS = new Dictionary<string, (string, IFormFile)>();
            if (this.Avatar != null)
            {
                dicRS.Add(nameof(Avatar), (Path.Combine(ConstFolderPath.Images, ConstFolderPath.Upload), this.Avatar));
            }
            if (this.ListImage1 != null)
            {
                for(int i = 0; i < this.ListImage1.Length; i++)
                {
                    var formFile = this.ListImage1[i];
                    dicRS.Add($"{nameof(ListImage1)}{ConstCommon.ConstSeperatorFileKey}{i}", (Path.Combine(ConstFolderPath.Images, ConstFolderPath.Upload), formFile));
                }
            }
            if (this.File1 != null)
            {
                dicRS.Add(nameof(File1), (Path.Combine(ConstFolderPath.Files, ConstFolderPath.Upload), this.File1));
            }
            if (this.ListFile1 != null)
            {
                for(int i = 0; i < this.ListFile1.Length; i++)
                {
                    var formFile = this.ListFile1[i];
                    dicRS.Add($"{nameof(ListFile1)}{ConstCommon.ConstSeperatorFileKey}{i}", (Path.Combine(ConstFolderPath.Files, ConstFolderPath.Upload), formFile));
                }
            }
            
            return dicRS;
        }
    }
}
