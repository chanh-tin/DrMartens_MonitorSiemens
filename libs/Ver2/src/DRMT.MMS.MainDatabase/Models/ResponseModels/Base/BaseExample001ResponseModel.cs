// -----------------------------------------------------------------------------
// This file was automatically generated.
// Please do not edit this file manually.
//
// Generated Date: 
//
// -----------------------------------------------------------------------------

using iSoft.Common.Utils;
using SourceBaseBE.Database.Entities;
using Microsoft.EntityFrameworkCore;
using iSoft.Common.Models.ResponseModels;
using LinqKit;
using iSoft.Database.Models.ResponseModels.Base.BaseCRUD;
using static iSoft.Common.ConstCommon;
using iSoft.Database.ExtensionMethods;
using SourceBaseBE.Database.Enums;
using iSoft.Common.Enums;

namespace SourceBaseBE.Database.Models.ResponseModels
{
    public class BaseExample001ResponseModel : BaseCRUDResponseModel<Example001Entity>
    {
        //public virtual string SerialCode { get; set; }

        public virtual string Name { get; set; }
        public virtual string NameReadonly { get; set; }
        public virtual string Username { get; set; }
        public virtual string? Description { get; set; }
        public virtual string? Label1 { get; set; }
        public virtual string? Password1 { get; set; }
        public virtual string? Password2 { get; set; }
        public virtual string? Email1 { get; set; }
        public virtual string? PhoneNumber1 { get; set; }

        protected DateTime? _startDate { get; set; }
        public virtual string? StartDate
        {
            get
            {
                if (_startDate.HasValue)
                {
                    return _startDate.Value.ToString(ConstDateTimeFormat.YYYYMMDD);
                }
                return null;
            }
            set
            {
                if (!string.IsNullOrEmpty(value))
                {
                    try
                    {
                        _startDate = DateTimeUtil.GetDateTimeFromString(value, ConstDateTimeFormat.YYYYMMDD);
                    }
                    catch
                    {
                        _startDate = null;
                    }
                }
            }
        }
        public virtual DateTime? StartDateTime { get; set; }
        public virtual string? TimeOnlyData { get; set; }
        public virtual int? RefreshTime1 { get; set; }
        public virtual int? RefreshTime2 { get; set; }
        public virtual int? RefreshTime3 { get; set; }
        public virtual int? RefreshTime4 { get; set; }

        string? _refreshTime5 { get; set; }
        public virtual string[]? RefreshTime5
        {
            get
            {
                if (_refreshTime5 != null)
                {
                    return _refreshTime5.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _refreshTime5 = string.Join(",", value);
                    }
                    catch
                    {
                        _refreshTime5 = null;
                    }
                }
                else
                {
                    _refreshTime5 = null;
                }
            }
        }
        public virtual double? Price { get; set; }
        public virtual int? Gender { get; set; }
        public virtual bool? Enable { get; set; }

        string? _checkBoxValues { get; set; }
        public virtual string[]? CheckBoxValues
        {
            get
            {
                if (_checkBoxValues != null)
                {
                    return _checkBoxValues.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _checkBoxValues = string.Join(",", value);
                    }
                    catch
                    {
                        _checkBoxValues = null;
                    }
                }
                else
                {
                    _checkBoxValues = null;
                }
            }
        }
        public virtual string? Avatar { get; set; }

        string? _listImage1 { get; set; }
        public virtual string[]? ListImage1
        {
            get
            {
                if (_listImage1 != null)
                {
                    return _listImage1.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _listImage1 = string.Join(",", value);
                    }
                    catch
                    {
                        _listImage1 = null;
                    }
                }
                else
                {
                    _listImage1 = null;
                }
            }
        }
        public virtual string? File1 { get; set; }

        string? _listFile1 { get; set; }
        public virtual string[]? ListFile1
        {
            get
            {
                if (_listFile1 != null)
                {
                    return _listFile1.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _listFile1 = string.Join(",", value);
                    }
                    catch
                    {
                        _listFile1 = null;
                    }
                }
                else
                {
                    _listFile1 = null;
                }
            }
        }
        public virtual long? Example002Id { get; set; }
        public virtual Example002Entity? ItemExample002 { get; set; }
        public virtual List<Example003Entity>? ListExample003 { get; set; }
        public virtual List<Example001TransEntity>? ListExample001Trans { get; set; }
        

        public string? Example002Name { get; set; }
                                
        public override object SetData(Example001Entity entity)
        {
            base.SetData(entity);
            //this.SerialCode = entity.SerialCode;
            this.Name = entity.Name;
            this.NameReadonly = entity.NameReadonly;
            this.Username = entity.Username;
            this.Description = entity.Description;
            this.Label1 = entity.Label1;
            if (!string.IsNullOrEmpty(entity.Password1))
            {
                this.Password1 = new string('*', entity.Password1.Length);
            }
            if (!string.IsNullOrEmpty(entity.Password2))
            {
                this.Password2 = new string('*', entity.Password2.Length);
            }
            this.Email1 = entity.Email1;
            this.PhoneNumber1 = entity.PhoneNumber1;
            this._startDate = entity.StartDate;
            this.StartDateTime = entity.StartDateTime;
            this.TimeOnlyData = entity.TimeOnlyData;
            this.RefreshTime1 = entity.RefreshTime1;
            this.RefreshTime2 = entity.RefreshTime2;
            this.RefreshTime3 = entity.RefreshTime3;
            this.RefreshTime4 = entity.RefreshTime4;
            this._refreshTime5 = entity.RefreshTime5;
            this.Price = entity.Price;
            this.Gender = entity.Gender;
            this.Enable = entity.Enable;
            this._checkBoxValues = entity.CheckBoxValues;
            this.Avatar = entity.Avatar;
            this._listImage1 = entity.ListImage1;
            this.File1 = entity.File1;
            this._listFile1 = entity.ListFile1;
            this.Example002Id = entity.Example002Id;
            this.Example002Name = entity.ItemExample002?.Name;
            this.ItemExample002 = entity.ItemExample002;
            if (entity.ListExample003 != null)
            {
                this.ListExample003 = entity.ListExample003;
            }
            if (entity.ListExample001Trans != null)
            {
                this.ListExample001Trans = entity.ListExample001Trans;
            }
        
            return this;
        }
        public override List<object> SetData(List<Example001Entity> listEntity)
        {
            List<Object> listRS = new List<object>();
            foreach (Example001Entity entity in listEntity)
            {
                listRS.Add(new Example001ResponseModel().SetData(entity));
            }
            return listRS;
        }

        /// <summary>
        /// Build query for filter
        /// # FILTER LOGIC
        /// </summary>
        /// <param name="query"></param>
        /// <param name="dicInputFieldKey2Value"></param>
        /// <param name="getFieldAttributes"></param>
        /// <param name="responseType"></param>
        /// <returns></returns>
        public virtual IQueryable<Example001Entity> PrepareWhereQueryFilter(
            IQueryable<Example001Entity> query,
            Dictionary<string, object> dicInputFieldKey2Value,
            Func<Dictionary<string, string>> getFieldAttributes,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            foreach (var keyVal in dicInputFieldKey2Value)
            {
                bool renameInputFieldKeyFlag = false;
                string inputFieldKey = keyVal.Key;

                if (!dicFieldAttr.ContainsKey(inputFieldKey))
                {
                    continue;
                }

                var fieldType = dicFieldAttr[inputFieldKey];
                object? searchValue = ConvertUtil.ConvertData(keyVal.Value, fieldType);
                if (searchValue == null)
                {
                    continue;
                }

                if (false)
                {
                }
                else if (inputFieldKey == nameof(Example001ResponseModel.Example002Name))
                {
                    inputFieldKey = nameof(Example001ResponseModel.Example002Id);
                    renameInputFieldKeyFlag = true;
                }
                                

                if (renameInputFieldKeyFlag)
                {
                    if (!dicFieldAttr.ContainsKey(inputFieldKey))
                    {
                        continue;
                    }

                    fieldType = dicFieldAttr[inputFieldKey];
                    searchValue = ConvertUtil.ConvertData(keyVal.Value, fieldType);
                    if (searchValue == null)
                    {
                        continue;
                    }
                }

                var propertyInfo = responseType.GetProperty(inputFieldKey);
                if (propertyInfo == null)
                {
                    continue;
                }

                query = query.WherePropertyEquals(inputFieldKey, searchValue);
            }
            return query;
        }

        /// <summary>
        /// Build query for sort
        /// # SORT LOGIC
        /// </summary>
        /// <param name="query"></param>
        /// <param name="dicInputFieldKey2SortOrder"></param>
        /// <param name="getFieldAttributes"></param>
        /// <param name="responseType"></param>
        /// <returns></returns>
        /// <exception cref="Exception"></exception>
        public virtual IQueryable<Example001Entity> PrepareQuerySort(
            IQueryable<Example001Entity> query,
            Dictionary<string, long> dicInputFieldKey2SortOrder,
            Func<Dictionary<string, string>> getFieldAttributes,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            foreach (var keyVal in dicInputFieldKey2SortOrder)
            {
                string inputFieldKey = keyVal.Key;

                var propertyInfo = responseType.GetProperty(inputFieldKey);
                if (propertyInfo == null)
                {
                    continue;
                }

                if (false)
                {
                }
                else if (inputFieldKey == nameof(Example001ResponseModel.Example002Name))
                {
                    if (keyVal.Value == 1)
                    {
                        query = query.OrderBy(x => x.ItemExample002.Name).ThenBy(x => x.Order).ThenBy(x => x.Id);
                    }
                    else if (keyVal.Value == -1)
                    {
                        query = query.OrderByDescending(x => x.ItemExample002.Name).ThenBy(x => x.Order).ThenBy(x => x.Id);
                    }
                }
                                
                else
                {
                    if (keyVal.Value == 1)
                    {
                        query = query.OrderByPropertyAscending(inputFieldKey);
                    }
                    else
                    {
                        query = query.OrderByPropertyDescending(inputFieldKey);
                    }
                }
            }
            return query;
        }

        /// <summary>
        /// Build query for search data
        /// # SEARCH LOGIC
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="inputFieldKey"></param>
        /// <param name="searchValue"></param>
        /// <returns></returns>
        public virtual IQueryable<Example001Entity> PrepareWhereQuerySearch(
            IQueryable<Example001Entity> query,
            Dictionary<string, string> dicInputFieldKey2Value,
            Func<Dictionary<string, string>> getFieldAttributes,
            Func<Dictionary<string, string>> getFieldAttributesSearchAll,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            var dicFieldAttrSearchAll = getFieldAttributesSearchAll();
            var predicate = LinqKit.PredicateBuilder.New<Example001Entity>(true);
            bool searchAllFlag = false;
            foreach (var keyVal in dicInputFieldKey2Value)
            {
                string inputFieldKeyAll = keyVal.Key;
                if (inputFieldKeyAll.Trim().ToUpper() == "ALL")
                {
                    searchAllFlag = true;
                    string searchValue = ConvertUtil.GetString(keyVal.Value);
                    if (searchValue == null)
                    {
                        break;
                    }

                    foreach (var keyVal2 in dicFieldAttrSearchAll)
                    {
                        string inputFieldKey = keyVal2.Key;
                        predicate = this.GetPredicate(predicate, inputFieldKey, searchValue);
                    }
                    break;
                }
            }

            if (!searchAllFlag)
            {
                foreach (var keyVal in dicInputFieldKey2Value)
                {
                    string inputFieldKey = keyVal.Key;
                    if (!dicFieldAttr.ContainsKey(inputFieldKey))
                    {
                        continue;
                    }

                    var fieldType = dicFieldAttr[inputFieldKey];
                    string searchValue = ConvertUtil.GetString(keyVal.Value);
                    if (searchValue == null)
                    {
                        continue;
                    }

                    var propertyInfo = responseType.GetProperty(inputFieldKey);
                    if (propertyInfo == null)
                    {
                        continue;
                    }

                    predicate = this.GetPredicate(predicate, inputFieldKey, searchValue);
                }
            }
            return query.Where(predicate).AsQueryable();
        }

        /// <summary>
        /// Build predicate for search data
        /// # SEARCH LOGIC SUB
        /// </summary>
        /// <param name="predicate"></param>
        /// <param name="inputFieldKey"></param>
        /// <param name="searchValue"></param>
        /// <returns></returns>
        public virtual ExpressionStarter<Example001Entity> GetPredicate(ExpressionStarter<Example001Entity> predicate, string inputFieldKey, string searchValue)
        {    
            searchValue = searchValue.Trim().ToLower();
            if (inputFieldKey == nameof(BaseExample001ResponseModel.Id))
            {
                predicate = predicate.Or(x => EF.Functions.Unaccent(x.Id.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            else if (inputFieldKey == nameof(BaseExample001ResponseModel.Order))
            {
                predicate = predicate.Or(x => EF.Functions.Unaccent(x.Order.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Name))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Name.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.NameReadonly))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.NameReadonly.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Username))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Username.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.ListExample001Trans))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.ListExample001Trans.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.StartDate))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.StartDate.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.StartDateTime))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.StartDateTime.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Gender))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Gender.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            else if (inputFieldKey == nameof(Example001ResponseModel.Example002Name))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.ItemExample002.Name.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Description))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Description.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.CheckBoxValues))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.CheckBoxValues.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Password1))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Password1.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.ListExample003))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.ListExample003.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.ListFile1))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.ListFile1.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Enable))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Enable.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.ListImage1))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.ListImage1.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Avatar))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Avatar.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.File1))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.File1.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.TimeOnlyData))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.TimeOnlyData.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.RefreshTime3))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.RefreshTime3.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.RefreshTime2))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.RefreshTime2.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.RefreshTime1))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.RefreshTime1.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Price))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Price.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.PhoneNumber1))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.PhoneNumber1.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Email1))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Email1.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Password2))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Password2.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.RefreshTime5))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.RefreshTime5.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.Label1))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.Label1.ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
            if (inputFieldKey == nameof(Example001ResponseModel.RefreshTime4))
            {
                predicate = predicate.Or(x => Microsoft.EntityFrameworkCore.EF.Functions.Unaccent(x.RefreshTime4.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue}")));
            }
                                
            return predicate;
        }

        /// <summary>
        /// All attributes for search and filter and sort
        /// # SEARCH FIELDS
        /// # FILTER FIELDS
        /// # SORT FIELDS
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, string> GetFieldAttributes()
        {
            // key: field name, value: field type (string, long, int, float, double, byte, short, DateTime, bool)
            Dictionary<string, string> dic = new Dictionary<string, string>();
            dic.Add(nameof(Example001ResponseModel.Name), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.NameReadonly), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Username), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ListExample001Trans), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.StartDate), typeof(DateTime).ToString());
            dic.Add(nameof(Example001ResponseModel.StartDateTime), typeof(DateTime).ToString());
            dic.Add(nameof(Example001ResponseModel.Gender), typeof(int).ToString());
            dic.Add(nameof(Example001ResponseModel.Example002Id), typeof(long).ToString());
            dic.Add(nameof(Example001ResponseModel.Example002Name), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Description), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Password1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ListExample003), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ItemExample002), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ListFile1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.File1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ListImage1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Avatar), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.CheckBoxValues), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Price), typeof(double).ToString());
            dic.Add(nameof(Example001ResponseModel.Label1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime5), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime3), typeof(int).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime2), typeof(int).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime1), typeof(int).ToString());
            dic.Add(nameof(Example001ResponseModel.TimeOnlyData), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.PhoneNumber1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Email1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Password2), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Enable), typeof(bool).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime4), typeof(int).ToString());
                                

            return dic;
        }

        /// <summary>
        /// Atribute for search all (search default)
        /// # SEARCH ALL FIELDS
        /// </summary>
        /// <returns></returns>
        public virtual Dictionary<string, string> GetFieldAttributesSearchAll()
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            dic.Add(nameof(Example001ResponseModel.Name), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.NameReadonly), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Username), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ListExample001Trans), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.StartDate), typeof(DateTime).ToString());
            dic.Add(nameof(Example001ResponseModel.StartDateTime), typeof(DateTime).ToString());
            dic.Add(nameof(Example001ResponseModel.Gender), typeof(int).ToString());
            dic.Add(nameof(Example001ResponseModel.Example002Id), typeof(long).ToString());
            dic.Add(nameof(Example001ResponseModel.Example002Name), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Description), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Password1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ListExample003), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ItemExample002), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ListFile1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.File1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.ListImage1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Avatar), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.CheckBoxValues), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Price), typeof(double).ToString());
            dic.Add(nameof(Example001ResponseModel.Label1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime5), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime3), typeof(int).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime2), typeof(int).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime1), typeof(int).ToString());
            dic.Add(nameof(Example001ResponseModel.TimeOnlyData), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.PhoneNumber1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Email1), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Password2), typeof(string).ToString());
            dic.Add(nameof(Example001ResponseModel.Enable), typeof(bool).ToString());
            dic.Add(nameof(Example001ResponseModel.RefreshTime4), typeof(int).ToString());
                                

            return dic;
        }

        /// <summary>
        /// Get column for FE
        /// # SEARCHABLE
        /// # FILTERABLE
        /// # SORTABLE
        /// # DISPLAY ON LIST
        /// # ORDER BY ON LIST
        /// # ORDER BY ON FORM DATA
        /// </summary>
        /// <returns></returns>
        public virtual List<ColumnResponseModel> GetColumnAttribute()
        {
            List<ColumnResponseModel> columns = new List<ColumnResponseModel>();

            columns.Add(new ColumnResponseModel(
                key: nameof(BaseExample001ResponseModel.Id),
                displayName: nameof(BaseExample001ResponseModel.Id),
                filterable: false,
                searchable: false,
                sortable: false,
                displayable: false
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Name),
                displayName: nameof(Example001ResponseModel.Name),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.NameReadonly),
                displayName: nameof(Example001ResponseModel.NameReadonly),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Username),
                displayName: nameof(Example001ResponseModel.Username),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.ListExample001Trans),
                displayName: nameof(Example001ResponseModel.ListExample001Trans),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.StartDate),
                displayName: nameof(Example001ResponseModel.StartDate),
                searchable: false, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.StartDateTime),
                displayName: nameof(Example001ResponseModel.StartDateTime),
                searchable: false, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Gender),
                displayName: nameof(Example001ResponseModel.Gender),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Example002Id),
                displayName: nameof(Example001ResponseModel.Example002Id),
                searchable: false, 
                filterable: false, 
                sortable: false, 
                displayable: false
                ));
            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Example002Name),
                displayName: nameof(Example001ResponseModel.Example002Name),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Description),
                displayName: nameof(Example001ResponseModel.Description),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.RefreshTime5),
                displayName: nameof(Example001ResponseModel.RefreshTime5),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Password2),
                displayName: nameof(Example001ResponseModel.Password2),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Email1),
                displayName: nameof(Example001ResponseModel.Email1),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.PhoneNumber1),
                displayName: nameof(Example001ResponseModel.PhoneNumber1),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.TimeOnlyData),
                displayName: nameof(Example001ResponseModel.TimeOnlyData),
                searchable: false, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.RefreshTime1),
                displayName: nameof(Example001ResponseModel.RefreshTime1),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.RefreshTime2),
                displayName: nameof(Example001ResponseModel.RefreshTime2),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.RefreshTime3),
                displayName: nameof(Example001ResponseModel.RefreshTime3),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Label1),
                displayName: nameof(Example001ResponseModel.Label1),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.File1),
                displayName: nameof(Example001ResponseModel.File1),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.CheckBoxValues),
                displayName: nameof(Example001ResponseModel.CheckBoxValues),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Avatar),
                displayName: nameof(Example001ResponseModel.Avatar),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.ListImage1),
                displayName: nameof(Example001ResponseModel.ListImage1),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Enable),
                displayName: nameof(Example001ResponseModel.Enable),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.ListFile1),
                displayName: nameof(Example001ResponseModel.ListFile1),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.ListExample003),
                displayName: nameof(Example001ResponseModel.ListExample003),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Password1),
                displayName: nameof(Example001ResponseModel.Password1),
                searchable: true, 
                filterable: false, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.Price),
                displayName: nameof(Example001ResponseModel.Price),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));

            columns.Add(new ColumnResponseModel(
                key: nameof(Example001ResponseModel.RefreshTime4),
                displayName: nameof(Example001ResponseModel.RefreshTime4),
                searchable: true, 
                filterable: true, 
                sortable: true, 
                displayable: true
                ));
                                

            return columns;
        }
    }
}
