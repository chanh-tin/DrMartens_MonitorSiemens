// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SourceBaseBE.Database.DBContexts;

#nullable disable

namespace SourceBaseBE.Database.Migrations
{
    [DbContext(typeof(CommonDBContext))]
    partial class CommonDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AreaCodeEntityEmployeeEntity", b =>
                {
                    b.Property<long>("AreaCodesId")
                        .HasColumnType("bigint");

                    b.Property<long>("EmployeesId")
                        .HasColumnType("bigint");

                    b.HasKey("AreaCodesId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("AreaCodeEntityEmployeeEntity");
                });

            modelBuilder.Entity("AreaCodeEntityEntryRequestEntity", b =>
                {
                    b.Property<long>("AreaCodesId")
                        .HasColumnType("bigint");

                    b.Property<long>("EntryRequestsId")
                        .HasColumnType("bigint");

                    b.HasKey("AreaCodesId", "EntryRequestsId");

                    b.HasIndex("EntryRequestsId");

                    b.ToTable("AreaCodeEntityEntryRequestEntity");
                });

            modelBuilder.Entity("AuthGroupEntityAuthPermissionEntity", b =>
                {
                    b.Property<long>("AuthGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthPermissionsId")
                        .HasColumnType("bigint");

                    b.HasKey("AuthGroupsId", "AuthPermissionsId");

                    b.HasIndex("AuthPermissionsId");

                    b.ToTable("AuthGroupEntityAuthPermissionEntity");
                });

            modelBuilder.Entity("AuthGroupEntityUserEntity", b =>
                {
                    b.Property<long>("AuthGroupsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("AuthGroupsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AuthGroupEntityUserEntity");
                });

            modelBuilder.Entity("AuthPermissionEntityUserEntity", b =>
                {
                    b.Property<long>("AuthPermissionsId")
                        .HasColumnType("bigint");

                    b.Property<long>("UsersId")
                        .HasColumnType("bigint");

                    b.HasKey("AuthPermissionsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AuthPermissionEntityUserEntity");
                });

            modelBuilder.Entity("EmployeeEntityEmployeeEntity", b =>
                {
                    b.Property<long>("ManageById")
                        .HasColumnType("bigint");

                    b.Property<long>("ManagerDriversId")
                        .HasColumnType("bigint");

                    b.HasKey("ManageById", "ManagerDriversId");

                    b.HasIndex("ManagerDriversId");

                    b.ToTable("DriverManageByOwner", (string)null);
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AlarmEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AlarmAreaId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("AlarmAreaId");

                    b.Property<string>("AlarmName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("AlarmName");

                    b.Property<DateTime?>("AlarmTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("AlarmTime");

                    b.Property<long?>("AlarmTypeId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("AlarmTypeId");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("EntryRequestId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("EntryRequestId");

                    b.Property<string>("FilePath")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("FilePath");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AlarmAreaId");

                    b.HasIndex("AlarmTypeId");

                    b.HasIndex("EntryRequestId");

                    b.ToTable("Alarms");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AlarmTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AlarmTypeName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("AlarmTypeName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AlarmTypes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AreaCodeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AreaCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("AreaCode");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("AreaName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AreaCode")
                        .IsUnique();

                    b.ToTable("AreaCodes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AuthAccountTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AuthGroupEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ListAuthGroup");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AuthPermissionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ListAuthPermission");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AuthTokenEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("AuthAccountTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AuthTokenId")
                        .HasColumnType("bigint");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CompanyName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("LossDescription")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("EditerId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastLogin")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("License")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(31)
                        .HasColumnType("character varying(31)");

                    b.Property<int?>("EnableFlag")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("AuthAccountTypeId");

                    b.HasIndex("AuthTokenId")
                        .IsUnique();

                    b.HasIndex("EditerId")
                        .IsUnique();

                    b.ToTable("ListUser");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.CameraEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CameraLocation")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("CameraLocation");

                    b.Property<string>("CameraName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("CameraName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<int?>("FrameRate")
                        .HasColumnType("integer")
                        .HasColumnName("FrameRate");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<int?>("OutPutHeight")
                        .HasColumnType("integer")
                        .HasColumnName("OutPutHeight");

                    b.Property<int?>("OutPutWidth")
                        .HasColumnType("integer")
                        .HasColumnName("OutPutWidth");

                    b.Property<string>("RtspLink")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("RtspLink");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Cameras");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.CameraSettingEntity", b =>
                {
                    b.Property<long?>("AreaCodeId")
                        .HasColumnType("bigint")
                        .HasColumnName("AreaCodeId")
                        .HasColumnOrder(2);

                    b.Property<long?>("CameraId")
                        .HasColumnType("bigint")
                        .HasColumnName("CameraId")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("EndTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("EndTime");

                    b.Property<long?>("FilePathId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("FilePathId");

                    b.Property<DateTime?>("StartTime")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("StartTime");

                    b.HasKey("AreaCodeId", "CameraId");

                    b.HasIndex("CameraId");

                    b.HasIndex("FilePathId");

                    b.ToTable("CameraSettings");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.CertificateEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BackImageFileId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("BackImageFileId");

                    b.Property<string>("CertificateNumber")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("CertificateNumber");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("EditerId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("EditerId");

                    b.Property<long?>("FrontImageFileId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("FrontImageFileId");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeCertificate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("TypeCertificate");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BackImageFileId");

                    b.HasIndex("EditerId");

                    b.HasIndex("FrontImageFileId");

                    b.ToTable("Certificatess");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DataTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("DataTypeEntity");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DepartmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("FactoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DeviceEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("EquipmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Group")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("LineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MachineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("MaxOperationTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<long?>("OpenCloseCount")
                        .HasColumnType("bigint");

                    b.Property<long?>("OpenCloseLimit")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("OperationStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("Supplier")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LineId");

                    b.HasIndex("MachineId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DriverRegistrationEntity", b =>
                {
                    b.Property<long>("DriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("DriverId")
                        .HasColumnOrder(2);

                    b.Property<long>("EntryRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryRequestId")
                        .HasColumnOrder(1);

                    b.Property<bool?>("IsMain")
                        .HasColumnType("Bool")
                        .HasColumnName("IsMain");

                    b.HasKey("DriverId", "EntryRequestId");

                    b.HasIndex("EntryRequestId");

                    b.ToTable("DriverRegistrations");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EmployeeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("DepartmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("DisplayName");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("CHAR(100)");

                    b.Property<int>("EntryRequestCount")
                        .HasColumnType("integer")
                        .HasColumnName("EntryRequestCount");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("CHAR(50)");

                    b.Property<long?>("IdentityCardId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ImagePathId")
                        .HasColumnType("bigint")
                        .HasColumnName("ImagePathId");

                    b.Property<string>("JobTitle")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<long?>("LastEntryRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("CHAR(50)");

                    b.Property<string>("LossName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialCode")
                        .HasColumnType("text");

                    b.Property<long?>("ShiftId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("IdentityCardId");

                    b.HasIndex("ImagePathId");

                    b.HasIndex("LastEntryRequestId");

                    b.HasIndex("ShiftId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryCaptureEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CapturedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("CapturedBy");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long>("EntryRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryRequestId");

                    b.Property<long>("ImageFileId")
                        .HasColumnType("bigint")
                        .HasColumnName("ImageFileId");

                    b.Property<string>("InOutType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("InOutType");

                    b.Property<string>("LicensePlateScanned")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("LicensePlateScanned");

                    b.Property<float>("MeasuredWeight")
                        .HasColumnType("REAL")
                        .HasColumnName("MeasuredWeight");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnName("Note");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("EnableFlag")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("EnableFlag");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CapturedBy");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("EntryRequestId", "InOutType")
                        .IsUnique();

                    b.ToTable("EntryCaptures");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryReportEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long>("EntryRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryRequestId");

                    b.Property<long>("ImageFileId")
                        .HasColumnType("bigint")
                        .HasColumnName("ImageFileId");

                    b.Property<string>("InOutType")
                        .IsRequired()
                        .HasColumnType("VARCHAR(10)")
                        .HasColumnName("InOutType");

                    b.Property<string>("LicensePlateScanned")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("LicensePlateScanned");

                    b.Property<decimal>("MeasuredWeight")
                        .HasColumnType("numeric")
                        .HasColumnName("MeasuredWeight");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnName("Note");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("ReportBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ReportBy");

                    b.Property<string>("ReportStatus")
                        .IsRequired()
                        .HasColumnType("VARCHAR(20)")
                        .HasColumnName("ReportStatus");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntryRequestId");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("ReportBy");

                    b.ToTable("EntryReports");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryReportLogEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Action");

                    b.Property<long?>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("ChangedBy");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long>("EntryReportId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryReportId");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Note");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("EnableFlag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EnableFlag");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("EntryReportId");

                    b.ToTable("EntryReportLogs");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryRequestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApprovedBy")
                        .HasColumnType("bigint")
                        .HasColumnName("ApprovedBy");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long>("EntryRequestTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryRequestTypeId");

                    b.Property<long>("EntryTransactionTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryTransactionTypeId");

                    b.Property<bool?>("IsGuest")
                        .HasColumnType("boolean")
                        .HasColumnName("IsGuest");

                    b.Property<string>("Note")
                        .HasColumnType("TEXT")
                        .HasColumnName("Note");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerDriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("OwnerDriverId");

                    b.Property<string>("QrCode")
                        .HasColumnType("CHAR(6)")
                        .HasColumnName("QrCode");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RegistrationStatus");

                    b.Property<DateTime?>("TimeApproved")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("TimeApproved");

                    b.Property<DateTime?>("TimeIn")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("TimeIn");

                    b.Property<DateTime?>("TimeOut")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("TimeOut");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleId")
                        .HasColumnType("bigint")
                        .HasColumnName("VehicleId");

                    b.Property<decimal?>("Weight")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("EntryRequestTypeId");

                    b.HasIndex("EntryTransactionTypeId");

                    b.HasIndex("OwnerDriverId");

                    b.HasIndex("QrCode")
                        .IsUnique();

                    b.HasIndex("VehicleId");

                    b.ToTable("EntryRequests");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryRequestLogEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Action");

                    b.Property<long?>("ChangedBy")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("ChangedBy");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("EntryRequestId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("EntryRequestId");

                    b.Property<string>("Note")
                        .HasColumnType("text")
                        .HasColumnName("Note");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("EnableFlag")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("EnableFlag");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("EntryRequestId");

                    b.ToTable("EntryRequestLogs");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryRequestTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("TypeName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EntryRequestTypes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryTransactionTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("TypeName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("EntryTransactionTypes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EquipmentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Group")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("LineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MachineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("MaxOperationTime")
                        .HasColumnType("bigint");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime?>("OperationStartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long?>("RunTime")
                        .HasColumnType("bigint");

                    b.Property<string>("SerialCode")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Supplier")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("MachineId");

                    b.ToTable("Equipments");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.FactoryEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Factories");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.FileEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("LossName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<string>("SerialCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UploadedDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.GoodRegistrationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long>("EntryRequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("EntryRequestId");

                    b.Property<long>("GoodsTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("GoodsTypeId");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint")
                        .HasColumnName("Quantity");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntryRequestId");

                    b.HasIndex("GoodsTypeId");

                    b.ToTable("GoodRegistrations");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.GoodTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("Category");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("ImageFileId")
                        .HasColumnType("bigint");

                    b.Property<string>("LossName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("LossName");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("ProductSKU")
                        .HasColumnType("VARCHAR(255)")
                        .HasColumnName("ProductSKU");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Weight")
                        .HasColumnType("numeric")
                        .HasColumnName("Weight");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.ToTable("GoodTypes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.GuestEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("CiNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("CiNumber");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateOnly?>("DateOfBirth")
                        .HasColumnType("DATE")
                        .HasColumnName("DateOfBirth");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("DrivingLicense");

                    b.Property<long?>("EntryRequestId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("EntryRequestId");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)")
                        .HasColumnName("FullName");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EntryRequestId");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.IdentityCardEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("BackImageFileId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("BackImageFileId");

                    b.Property<string>("CiNumber")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("CiNumber");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("FrontImageFileId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("FrontImageFileId");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BackImageFileId");

                    b.HasIndex("FrontImageFileId");

                    b.ToTable("IdentityCards");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.LimitationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LowerLimit")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long?>("ParameterId")
                        .HasColumnType("bigint");

                    b.Property<string>("TargetValue")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("UpperLimit")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.HasKey("Id");

                    b.HasIndex("ParameterId");

                    b.ToTable("Limitations");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.LineEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("WorkshopId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Lines");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.MachineEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("FileId")
                        .HasColumnType("bigint");

                    b.Property<long>("LineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MachineOperatingInstructionFileId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("LineId");

                    b.ToTable("Machines");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.MessageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthGroupId")
                        .HasColumnType("bigint");

                    b.Property<long>("EditerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("VARCHAR(4000)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("EnableFlag")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("CHAR(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AuthGroupId");

                    b.HasIndex("EditerId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.NotificationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(511)
                        .HasColumnType("character varying(511)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("SendDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("EditerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.OrganizationEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ParameterEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<long?>("DataTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("DefaultValue")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("EnviromentVarName")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("EquipmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LastUpdatedValue")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<long?>("LineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MachineId")
                        .HasColumnType("bigint");

                    b.Property<int?>("MinTimeSavingDataIntervals")
                        .HasColumnType("integer");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("Publisher")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<int?>("ReadWrite")
                        .HasColumnType("INT");

                    b.Property<string>("StandardValue")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("TableSerial")
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR(255)");

                    b.Property<string>("Tags")
                        .HasColumnType("VARCHAR(100)");

                    b.Property<string>("UnitOfMeasurement")
                        .HasMaxLength(100)
                        .HasColumnType("VARCHAR(100)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DataTypeId");

                    b.HasIndex("DeviceId");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("LineId");

                    b.HasIndex("MachineId");

                    b.ToTable("Parameters");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ProductEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductTypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ProductTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ProductTypes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ShiftEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShiftTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ShiftTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ShiftTypes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.StockKeepingUnitEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ManufactoryDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProductId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("StockKeepingUnits");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.TestCRUD2Entity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("LossName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("TestCRUD2s");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.TestCRUDEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("BoolValue")
                        .HasColumnType("boolean");

                    b.Property<bool?>("BoolValue2")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateTimeValue")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateTimeValue2")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<double>("DoubleValue")
                        .HasColumnType("double precision");

                    b.Property<double?>("DoubleValue2")
                        .HasColumnType("double precision");

                    b.Property<int>("IntValue")
                        .HasColumnType("integer");

                    b.Property<int?>("IntValue2")
                        .HasColumnType("integer");

                    b.Property<long>("LongValue")
                        .HasColumnType("bigint");

                    b.Property<long?>("LongValue2")
                        .HasColumnType("bigint");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReviewerId")
                        .HasColumnType("bigint");

                    b.Property<short>("ShortValue")
                        .HasColumnType("smallint");

                    b.Property<short?>("ShortValue2")
                        .HasColumnType("smallint");

                    b.Property<string>("StringValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StringValue2")
                        .HasColumnType("text");

                    b.Property<long>("TimeIntervalInSeconds")
                        .HasColumnType("bigint");

                    b.Property<long?>("TimeIntervalInSeconds2")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReviewerId");

                    b.ToTable("TestCRUDs");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.VehicleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("ImageFileId")
                        .HasColumnType("bigint")
                        .HasColumnName("ImageFileId");

                    b.Property<long?>("LastEntryRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("LicensePlate");

                    b.Property<string>("LicensePlateImage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT")
                        .HasColumnName("LicensePlateImage");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<long>("OwnerDriverId")
                        .HasColumnType("bigint")
                        .HasColumnName("OwnerDriverId");

                    b.Property<string>("SealNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("SealNumber");

                    b.Property<int>("TankNumber")
                        .HasColumnType("integer")
                        .HasColumnName("TankNumber");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("VehicleTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("VehicleTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ImageFileId");

                    b.HasIndex("LastEntryRequestId");

                    b.HasIndex("OwnerDriverId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.VehicleTypeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("TypeName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.WorkshopEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long>("FactoryId")
                        .HasColumnType("bigint");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FactoryId");

                    b.ToTable("Workshops");
                });

            modelBuilder.Entity("iSoft.Database.Entities.FCMEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<bool?>("DeletedFlag")
                        .HasColumnType("boolean");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<int>("EnableFlag")
                        .HasColumnType("integer")
                        .HasColumnName("EnableFlag");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("Token");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("UpdatedBy")
                        .HasColumnType("bigint");

                    b.Property<long>("EditerId")
                        .HasColumnType("bigint")
                        .HasColumnName("EditerId");

                    b.HasKey("Id");

                    b.ToTable("FCM");
                });

            modelBuilder.Entity("refTestCRUDTestCRUD2", b =>
                {
                    b.Property<long>("TestCRUD2sId")
                        .HasColumnType("bigint");

                    b.Property<long>("TestCRUDsId")
                        .HasColumnType("bigint");

                    b.HasKey("TestCRUD2sId", "TestCRUDsId");

                    b.HasIndex("TestCRUDsId");

                    b.ToTable("refTestCRUDTestCRUD2");
                });

            modelBuilder.Entity("AreaCodeEntityEmployeeEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AreaCodeEntity", null)
                        .WithMany()
                        .HasForeignKey("AreaCodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AreaCodeEntityEntryRequestEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AreaCodeEntity", null)
                        .WithMany()
                        .HasForeignKey("AreaCodesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", null)
                        .WithMany()
                        .HasForeignKey("EntryRequestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthGroupEntityAuthPermissionEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AuthGroupEntity", null)
                        .WithMany()
                        .HasForeignKey("AuthGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.AuthPermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("AuthPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthGroupEntityUserEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AuthGroupEntity", null)
                        .WithMany()
                        .HasForeignKey("AuthGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthPermissionEntityUserEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AuthPermissionEntity", null)
                        .WithMany()
                        .HasForeignKey("AuthPermissionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeEntityEmployeeEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", null)
                        .WithMany()
                        .HasForeignKey("ManageById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", null)
                        .WithMany()
                        .HasForeignKey("ManagerDriversId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AlarmEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AreaCodeEntity", "AreaCode")
                        .WithMany("Alarms")
                        .HasForeignKey("AlarmAreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.AlarmTypeEntity", "AlarmType")
                        .WithMany("Alarms")
                        .HasForeignKey("AlarmTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "EntryRequest")
                        .WithMany("Alarms")
                        .HasForeignKey("EntryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AlarmType");

                    b.Navigation("AreaCode");

                    b.Navigation("EntryRequest");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.UserEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AuthAccountTypeEntity", "ItemAuthAccountType")
                        .WithMany("ListUser")
                        .HasForeignKey("AuthAccountTypeId");

                    b.HasOne("SourceBaseBE.Database.Entities.AuthTokenEntity", "ItemAuthToken")
                        .WithOne("User")
                        .HasForeignKey("SourceBaseBE.Database.Entities.UserEntity", "AuthTokenId");

                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "ItemEmployee")
                        .WithOne("User")
                        .HasForeignKey("SourceBaseBE.Database.Entities.UserEntity", "EditerId");

                    b.Navigation("ItemAuthAccountType");

                    b.Navigation("ItemAuthToken");

                    b.Navigation("ItemEmployee");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.CameraSettingEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AreaCodeEntity", "AreaCode")
                        .WithMany("CameraSettings")
                        .HasForeignKey("AreaCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.CameraEntity", "Camera")
                        .WithMany("CameraSettings")
                        .HasForeignKey("CameraId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "FilePath")
                        .WithMany()
                        .HasForeignKey("FilePathId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AreaCode");

                    b.Navigation("Camera");

                    b.Navigation("FilePath");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.CertificateEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "BackImageFile")
                        .WithMany()
                        .HasForeignKey("BackImageFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "ItemEmployee")
                        .WithMany("Certificates")
                        .HasForeignKey("EditerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "FrontImageFile")
                        .WithMany()
                        .HasForeignKey("FrontImageFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackImageFile");

                    b.Navigation("ItemEmployee");

                    b.Navigation("FrontImageFile");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DepartmentEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.FactoryEntity", "Factory")
                        .WithMany("Departments")
                        .HasForeignKey("FactoryId");

                    b.HasOne("SourceBaseBE.Database.Entities.OrganizationEntity", "Organization")
                        .WithMany("Departments")
                        .HasForeignKey("OrganizationId");

                    b.Navigation("Factory");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DeviceEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EquipmentEntity", "Equipment")
                        .WithMany("Devices")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("SourceBaseBE.Database.Entities.LineEntity", "Line")
                        .WithMany("Devices")
                        .HasForeignKey("LineId");

                    b.HasOne("SourceBaseBE.Database.Entities.MachineEntity", "Machine")
                        .WithMany("Devices")
                        .HasForeignKey("MachineId");

                    b.Navigation("Equipment");

                    b.Navigation("Line");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DriverRegistrationEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "Driver")
                        .WithMany("DriverRegistrations")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "EntryRequest")
                        .WithMany("DriverRegistrations")
                        .HasForeignKey("EntryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("EntryRequest");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EmployeeEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.DepartmentEntity", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("SourceBaseBE.Database.Entities.IdentityCardEntity", "IdentityCard")
                        .WithMany("Employees")
                        .HasForeignKey("IdentityCardId");

                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "ImagePath")
                        .WithMany()
                        .HasForeignKey("ImagePathId");

                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "LastEntryRequest")
                        .WithMany()
                        .HasForeignKey("LastEntryRequestId");

                    b.HasOne("SourceBaseBE.Database.Entities.ShiftEntity", "Shift")
                        .WithMany("Employees")
                        .HasForeignKey("ShiftId");

                    b.Navigation("Department");

                    b.Navigation("IdentityCard");

                    b.Navigation("ImagePath");

                    b.Navigation("LastEntryRequest");

                    b.Navigation("Shift");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryCaptureEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "CapturedByEmployee")
                        .WithMany("EntryCaptures")
                        .HasForeignKey("CapturedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "EntryRequest")
                        .WithMany("EntryCaptures")
                        .HasForeignKey("EntryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CapturedByEmployee");

                    b.Navigation("EntryRequest");

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryReportEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "EntryRequest")
                        .WithMany()
                        .HasForeignKey("EntryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "ReportByEmployee")
                        .WithMany()
                        .HasForeignKey("ReportBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntryRequest");

                    b.Navigation("ImageFile");

                    b.Navigation("ReportByEmployee");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryReportLogEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "ChangedByEmployee")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EntryReportEntity", "EntryReport")
                        .WithMany("EntryReportLogs")
                        .HasForeignKey("EntryReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByEmployee");

                    b.Navigation("EntryReport");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryRequestEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "EmployeeApproved")
                        .WithMany("EntryRequestsApproved")
                        .HasForeignKey("ApprovedBy");

                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestTypeEntity", "EntryRequestType")
                        .WithMany("EntryRequests")
                        .HasForeignKey("EntryRequestTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EntryTransactionTypeEntity", "EntryTransactionType")
                        .WithMany("EntryRequests")
                        .HasForeignKey("EntryTransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "EmployeeOwnerDriver")
                        .WithMany("EntryRequestsCreated")
                        .HasForeignKey("OwnerDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.VehicleEntity", "Vehicle")
                        .WithMany("EntryRequests")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeApproved");

                    b.Navigation("EmployeeOwnerDriver");

                    b.Navigation("EntryRequestType");

                    b.Navigation("EntryTransactionType");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryRequestLogEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "ChangedByEmployee")
                        .WithMany("EntryRequestLogs")
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "EntryRequest")
                        .WithMany("EntryRequestLogs")
                        .HasForeignKey("EntryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByEmployee");

                    b.Navigation("EntryRequest");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EquipmentEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.LineEntity", "Line")
                        .WithMany("Equipments")
                        .HasForeignKey("LineId");

                    b.HasOne("SourceBaseBE.Database.Entities.MachineEntity", "Machine")
                        .WithMany("Equipments")
                        .HasForeignKey("MachineId");

                    b.Navigation("Line");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.FactoryEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.OrganizationEntity", "Organization")
                        .WithMany("Factories")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.GoodRegistrationEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "EntryRequest")
                        .WithMany("GoodRegistrations")
                        .HasForeignKey("EntryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.GoodTypeEntity", "GoodsType")
                        .WithMany("GoodRegistrations")
                        .HasForeignKey("GoodsTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntryRequest");

                    b.Navigation("GoodsType");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.GoodTypeEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.Navigation("ImageFile");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.GuestEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "EntryRequest")
                        .WithMany("Guests")
                        .HasForeignKey("EntryRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntryRequest");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.IdentityCardEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "BackImageFile")
                        .WithMany()
                        .HasForeignKey("BackImageFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "FrontImageFile")
                        .WithMany()
                        .HasForeignKey("FrontImageFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BackImageFile");

                    b.Navigation("FrontImageFile");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.LimitationEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.ParameterEntity", "Parameter")
                        .WithMany("Limitations")
                        .HasForeignKey("ParameterId");

                    b.Navigation("Parameter");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.LineEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.WorkshopEntity", "Workshop")
                        .WithMany("Lines")
                        .HasForeignKey("WorkshopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.MachineEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "File")
                        .WithMany("Machines")
                        .HasForeignKey("FileId");

                    b.HasOne("SourceBaseBE.Database.Entities.LineEntity", "Line")
                        .WithMany("Machines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Line");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.MessageEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.AuthGroupEntity", "AuthGroup")
                        .WithMany()
                        .HasForeignKey("AuthGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("EditerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuthGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ParameterEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.DataTypeEntity", "DataType")
                        .WithMany("Parameters")
                        .HasForeignKey("DataTypeId");

                    b.HasOne("SourceBaseBE.Database.Entities.DeviceEntity", "Device")
                        .WithMany("Parameters")
                        .HasForeignKey("DeviceId");

                    b.HasOne("SourceBaseBE.Database.Entities.EquipmentEntity", "Equipment")
                        .WithMany("Parameters")
                        .HasForeignKey("EquipmentId");

                    b.HasOne("SourceBaseBE.Database.Entities.LineEntity", "Line")
                        .WithMany("Parameters")
                        .HasForeignKey("LineId");

                    b.HasOne("SourceBaseBE.Database.Entities.MachineEntity", "Machine")
                        .WithMany("Parameters")
                        .HasForeignKey("MachineId");

                    b.Navigation("DataType");

                    b.Navigation("Device");

                    b.Navigation("Equipment");

                    b.Navigation("Line");

                    b.Navigation("Machine");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ProductEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.ProductTypeEntity", "ProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeId");

                    b.Navigation("ProductType");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ShiftEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.ShiftTypeEntity", "ShiftType")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftTypeId");

                    b.Navigation("ShiftType");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.StockKeepingUnitEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.ProductEntity", "Product")
                        .WithMany("StockKeepingUnits")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.TestCRUDEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.UserEntity", "Reviewer")
                        .WithMany()
                        .HasForeignKey("ReviewerId");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.VehicleEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.FileEntity", "ImageFile")
                        .WithMany()
                        .HasForeignKey("ImageFileId");

                    b.HasOne("SourceBaseBE.Database.Entities.EntryRequestEntity", "LastEntryRequest")
                        .WithMany()
                        .HasForeignKey("LastEntryRequestId");

                    b.HasOne("SourceBaseBE.Database.Entities.EmployeeEntity", "OwnerDriver")
                        .WithMany("Vehicles")
                        .HasForeignKey("OwnerDriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.VehicleTypeEntity", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ImageFile");

                    b.Navigation("LastEntryRequest");

                    b.Navigation("OwnerDriver");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.WorkshopEntity", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.FactoryEntity", "Factory")
                        .WithMany("Workshops")
                        .HasForeignKey("FactoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Factory");
                });

            modelBuilder.Entity("refTestCRUDTestCRUD2", b =>
                {
                    b.HasOne("SourceBaseBE.Database.Entities.TestCRUD2Entity", null)
                        .WithMany()
                        .HasForeignKey("TestCRUD2sId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SourceBaseBE.Database.Entities.TestCRUDEntity", null)
                        .WithMany()
                        .HasForeignKey("TestCRUDsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AlarmTypeEntity", b =>
                {
                    b.Navigation("Alarms");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AreaCodeEntity", b =>
                {
                    b.Navigation("Alarms");

                    b.Navigation("CameraSettings");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AuthAccountTypeEntity", b =>
                {
                    b.Navigation("ListUser");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.AuthTokenEntity", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.CameraEntity", b =>
                {
                    b.Navigation("CameraSettings");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DataTypeEntity", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.DeviceEntity", b =>
                {
                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EmployeeEntity", b =>
                {
                    b.Navigation("User")
                        .IsRequired();

                    b.Navigation("Certificates");

                    b.Navigation("DriverRegistrations");

                    b.Navigation("EntryCaptures");

                    b.Navigation("EntryRequestLogs");

                    b.Navigation("EntryRequestsApproved");

                    b.Navigation("EntryRequestsCreated");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryReportEntity", b =>
                {
                    b.Navigation("EntryReportLogs");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryRequestEntity", b =>
                {
                    b.Navigation("Alarms");

                    b.Navigation("DriverRegistrations");

                    b.Navigation("EntryCaptures");

                    b.Navigation("EntryRequestLogs");

                    b.Navigation("GoodRegistrations");

                    b.Navigation("Guests");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryRequestTypeEntity", b =>
                {
                    b.Navigation("EntryRequests");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EntryTransactionTypeEntity", b =>
                {
                    b.Navigation("EntryRequests");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.EquipmentEntity", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.FactoryEntity", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Workshops");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.FileEntity", b =>
                {
                    b.Navigation("Machines");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.GoodTypeEntity", b =>
                {
                    b.Navigation("GoodRegistrations");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.IdentityCardEntity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.LineEntity", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Equipments");

                    b.Navigation("Machines");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.MachineEntity", b =>
                {
                    b.Navigation("Devices");

                    b.Navigation("Equipments");

                    b.Navigation("Parameters");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.OrganizationEntity", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Factories");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ParameterEntity", b =>
                {
                    b.Navigation("Limitations");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ProductEntity", b =>
                {
                    b.Navigation("StockKeepingUnits");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ProductTypeEntity", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ShiftEntity", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.ShiftTypeEntity", b =>
                {
                    b.Navigation("Shifts");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.VehicleEntity", b =>
                {
                    b.Navigation("EntryRequests");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.VehicleTypeEntity", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("SourceBaseBE.Database.Entities.WorkshopEntity", b =>
                {
                    b.Navigation("Lines");
                });
#pragma warning restore 612, 618
        }
    }
}
