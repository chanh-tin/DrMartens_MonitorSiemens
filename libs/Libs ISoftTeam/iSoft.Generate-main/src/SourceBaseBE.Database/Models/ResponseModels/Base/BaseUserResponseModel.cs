// -----------------------------------------------------------------------------
// This file was automatically generated.
// Please do not edit this file manually.
//
// Generated Date: 
//
// -----------------------------------------------------------------------------

using iSoft.Common.Utils;
using SourceBaseBE.Database.Entities;
using Microsoft.EntityFrameworkCore;
using SourceBaseBE.Database.ExtensionMethods;
using iSoft.Common.Models.ResponseModels;
using LinqKit;
using SourceBaseBE.Database.Enums;
using static iSoft.Common.ConstCommon;
using iSoft.Common.Enums;

namespace SourceBaseBE.Database.Models.ResponseModels
{
    public class BaseUserResponseModel : BaseCRUDResponseModel<UserEntity>
    {
        public virtual string Username { get; set; }
        public virtual string Password { get; set; }
        public virtual string? DisplayName { get; set; }
        public virtual string? FirstName { get; set; }
        public virtual string? MiddleName { get; set; }
        public virtual string? LastName { get; set; }
        public virtual EnumGender? Gender { get; set; }
        public virtual string? PhoneNumber { get; set; }
        public virtual string? Email { get; set; }
        public virtual string? Address { get; set; }

        DateTime? _birthday { get; set; }
        public virtual string? Birthday
        {
            get
            {
                if (_birthday.HasValue)
                {
                    return _birthday.Value.ToString(ConstDateTimeFormat.YYYYMMDD);
                }
                return null;
            }
            set
            {
                if (!string.IsNullOrEmpty(value))
                {
                    try
                    {
                        _birthday = DateTimeUtil.GetDateTimeFromString(value, ConstDateTimeFormat.YYYYMMDD);
                    }
                    catch
                    {
                        _birthday = null;
                    }
                }
            }
        }
        public virtual string? CompanyName { get; set; }
        public virtual string? Avatar { get; set; }
        public virtual long? LanguageId { get; set; }
        public virtual LanguageEntity? ItemLanguage { get; set; }
        public virtual long? CountryId { get; set; }
        public virtual CountryEntity? ItemCountry { get; set; }
        public virtual string Role { get; set; }
        public virtual string? License { get; set; }
        public virtual EnumEnableFlag? EnableFlag { get; set; }

        DateTime? _lastLogin { get; set; }
        public virtual string? LastLogin
        {
            get
            {
                if (_lastLogin.HasValue)
                {
                    return _lastLogin.Value.ToString(ConstDateTimeFormat.YYYYMMDD);
                }
                return null;
            }
            set
            {
                if (!string.IsNullOrEmpty(value))
                {
                    try
                    {
                        _lastLogin = DateTimeUtil.GetDateTimeFromString(value, ConstDateTimeFormat.YYYYMMDD);
                    }
                    catch
                    {
                        _lastLogin = null;
                    }
                }
            }
        }
        public virtual string? Notes { get; set; }
        //public virtual long? EmployeeId { get; set; }
        //public virtual EmployeeEntity? ItemEmployee { get; set; }
        public virtual List<ISoftProjectEntity>? ListISoftProject { get; set; }
        public virtual List<PermissionEntity>? ListPermission { get; set; }
        public virtual List<UserGroupEntity>? ListUserGroup { get; set; }
        
        public override object SetData(UserEntity entity)
        {
            base.SetData(entity);
            this.Username = entity.Username;
            if (!string.IsNullOrEmpty(entity.Password))
            {
                this.Password = new string('*', entity.Password.Length);
            }
            this.DisplayName = entity.DisplayName;
            this.FirstName = entity.FirstName;
            this.MiddleName = entity.MiddleName;
            this.LastName = entity.LastName;
            this.Gender = entity.Gender;
            this.PhoneNumber = entity.PhoneNumber;
            this.Email = entity.Email;
            this.Address = entity.Address;
            this._birthday = entity.Birthday;
            this.CompanyName = entity.CompanyName;
            this.Avatar = entity.Avatar;
            this.LanguageId = entity.LanguageId;
            this.ItemLanguage = entity.ItemLanguage;
            this.CountryId = entity.CountryId;
            this.ItemCountry = entity.ItemCountry;
            this.Role = entity.Role;
            this.License = entity.License;
            this.EnableFlag = entity.EnableFlag;
            this._lastLogin = entity.LastLogin;
            this.Notes = entity.Notes;
            if (entity.ListISoftProject != null)
            {
                this.ListISoftProject = entity.ListISoftProject.Select(x => x).ToList();
            }
            if (entity.ListPermission != null)
            {
                this.ListPermission = entity.ListPermission.Select(x => x).ToList();
            }
            if (entity.ListUserGroup != null)
            {
                this.ListUserGroup = entity.ListUserGroup.Select(x => x).ToList();
            }
        
            return this;
        }
        public override List<object> SetData(List<UserEntity> listEntity)
        {
            List<Object> listRS = new List<object>();
            foreach (UserEntity entity in listEntity)
            {
                listRS.Add(new BaseUserResponseModel().SetData(entity));
            }
            return listRS;
        }
        public IQueryable<UserEntity> PrepareWhereQueryFilter(
            IQueryable<UserEntity> query,
            Dictionary<string, object> dicInputFieldKey2Value,
            Func<Dictionary<string, string>> getFieldAttributes,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            foreach (var keyVal in dicInputFieldKey2Value)
            {
                string inputFieldKey = keyVal.Key;
                if (!dicFieldAttr.ContainsKey(inputFieldKey))
                {
                    continue;
                }

                var fieldType = dicFieldAttr[inputFieldKey];
                object? searchValue = ConvertUtil.ConvertData(keyVal.Value, fieldType);
                if (searchValue == null)
                {
                    continue;
                }

                var propertyInfo = responseType.GetProperty(inputFieldKey);
                if (propertyInfo == null)
                {
                    continue;
                }

                query = query.WherePropertyEquals(inputFieldKey, searchValue);
            }
            return query;
        }

        public IQueryable<UserEntity> PrepareQuerySort(
            IQueryable<UserEntity> query,
            Dictionary<string, long> dicInputFieldKey2SortOrder,
            Func<Dictionary<string, string>> getFieldAttributes,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            foreach (var keyVal in dicInputFieldKey2SortOrder)
            {
                string inputFieldKey = keyVal.Key;

                var propertyInfo = responseType.GetProperty(inputFieldKey);
                if (propertyInfo == null)
                {
                    continue;
                }

                if (keyVal.Value == -1)
                {
                    query = query.OrderByPropertyDescending(inputFieldKey);
                }
                else
                {
                    query = query.OrderByPropertyAscending(inputFieldKey);
                }
            }
            return query;
        }
        public IQueryable<UserEntity> PrepareWhereQuerySearch(
            IQueryable<UserEntity> query,
            Dictionary<string, string> dicInputFieldKey2Value,
            Func<Dictionary<string, string>> getFieldAttributes,
            Func<Dictionary<string, string>> getFieldAttributesSearchAll,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            var dicFieldAttrSearchAll = getFieldAttributesSearchAll();
            var predicate = LinqKit.PredicateBuilder.New<UserEntity>(true);
            bool searchAllFlag = false;
            foreach (var keyVal in dicInputFieldKey2Value)
            {
                string inputFieldKeyAll = keyVal.Key;
                if (inputFieldKeyAll.Trim().ToUpper() == "ALL")
                {
                    searchAllFlag = true;
                    string searchValue = ConvertUtil.GetString(keyVal.Value);
                    if (searchValue == null)
                    {
                        break;
                    }

                    foreach (var keyVal2 in dicFieldAttrSearchAll)
                    {
                        string inputFieldKey = keyVal2.Key;
                        predicate = this.GetPredicate(predicate, inputFieldKey, searchValue);
                    }
                    break;
                }
            }

            if (!searchAllFlag)
            {
                foreach (var keyVal in dicInputFieldKey2Value)
                {
                    string inputFieldKey = keyVal.Key;
                    if (!dicFieldAttr.ContainsKey(inputFieldKey))
                    {
                        continue;
                    }

                    var fieldType = dicFieldAttr[inputFieldKey];
                    string searchValue = ConvertUtil.GetString(keyVal.Value);
                    if (searchValue == null)
                    {
                        continue;
                    }

                    var propertyInfo = responseType.GetProperty(inputFieldKey);
                    if (propertyInfo == null)
                    {
                        continue;
                    }

                    predicate = this.GetPredicate(predicate, inputFieldKey, searchValue);
                }
            }
            return query.Where(predicate).AsQueryable();
        }

        public virtual ExpressionStarter<UserEntity> GetPredicate(ExpressionStarter<UserEntity> predicate, string inputFieldKey, string searchValue)
        {
            if (inputFieldKey == nameof(BaseUserResponseModel.Id))
            {
                predicate = predicate.Or(x => EF.Functions.Unaccent(x.Id.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue.ToLower()}")));
            }
            else if (inputFieldKey == nameof(BaseUserResponseModel.Order))
            {
                predicate = predicate.Or(x => EF.Functions.Unaccent(x.Order.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue.ToLower()}")));
            }
            return predicate;
        }

        public virtual Dictionary<string, string> GetFieldAttributes()
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            dic.Add(nameof(BaseUserResponseModel.Username), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Password), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.DisplayName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.FirstName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.MiddleName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.LastName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.PhoneNumber), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Email), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Address), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Birthday), typeof(DateTime).ToString());
            dic.Add(nameof(BaseUserResponseModel.CompanyName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Avatar), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Role), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.License), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.LastLogin), typeof(DateTime).ToString());
            dic.Add(nameof(BaseUserResponseModel.Notes), typeof(string).ToString());
                    

            return dic;
        }

        public virtual Dictionary<string, string> GetFieldAttributesSearchAll()
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            dic.Add(nameof(BaseUserResponseModel.Username), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Password), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.DisplayName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.FirstName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.MiddleName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.LastName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.PhoneNumber), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Email), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Address), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Birthday), typeof(DateTime).ToString());
            dic.Add(nameof(BaseUserResponseModel.CompanyName), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Avatar), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.Role), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.License), typeof(string).ToString());
            dic.Add(nameof(BaseUserResponseModel.LastLogin), typeof(DateTime).ToString());
            dic.Add(nameof(BaseUserResponseModel.Notes), typeof(string).ToString());
                    

            return dic;
        }

        public virtual List<ColumnResponseModel> GetColumnAttribute()
        {
            List<ColumnResponseModel> columns = new List<ColumnResponseModel>();
            columns.Add(new ColumnResponseModel(
                nameof(BaseUserResponseModel.Id),
                nameof(BaseUserResponseModel.Id),
                true, true, true
                ));

            return columns;
        }
    }
}
