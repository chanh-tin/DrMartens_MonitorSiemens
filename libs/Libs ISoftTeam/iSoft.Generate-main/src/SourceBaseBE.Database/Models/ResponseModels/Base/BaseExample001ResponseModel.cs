// -----------------------------------------------------------------------------
// This file was automatically generated.
// Please do not edit this file manually.
//
// Generated Date: 
//
// -----------------------------------------------------------------------------

using iSoft.Common.Utils;
using SourceBaseBE.Database.Entities;
using Microsoft.EntityFrameworkCore;
using SourceBaseBE.Database.ExtensionMethods;
using iSoft.Common.Models.ResponseModels;
using LinqKit;
using SourceBaseBE.Database.Enums;
using static iSoft.Common.ConstCommon;
using iSoft.Common.Enums;

namespace SourceBaseBE.Database.Models.ResponseModels
{
    public class BaseExample001ResponseModel : BaseCRUDResponseModel<Example001Entity>
    {
        public virtual string Name { get; set; }
        public virtual string NameReadonly { get; set; }
        public virtual string Username { get; set; }
        public virtual string? Description { get; set; }
        public virtual string? Label1 { get; set; }
        public virtual string? Password1 { get; set; }
        public virtual string? Password2 { get; set; }
        public virtual string? Email1 { get; set; }
        public virtual string? PhoneNumber1 { get; set; }

        DateTime? _startDate { get; set; }
        public virtual string? StartDate
        {
            get
            {
                if (_startDate.HasValue)
                {
                    return _startDate.Value.ToString(ConstDateTimeFormat.YYYYMMDD);
                }
                return null;
            }
            set
            {
                if (!string.IsNullOrEmpty(value))
                {
                    try
                    {
                        _startDate = DateTimeUtil.GetDateTimeFromString(value, ConstDateTimeFormat.YYYYMMDD);
                    }
                    catch
                    {
                        _startDate = null;
                    }
                }
            }
        }
        public virtual DateTime? StartDateTime { get; set; }

        DateTime? _timeOnlyData { get; set; }
        public virtual string? TimeOnlyData
        {
            get
            {
                if (_timeOnlyData.HasValue)
                {
                    return _timeOnlyData.Value.ToString(ConstDateTimeFormat.HHMMSS);
                }
                return null;
            }
            set
            {
                if (!string.IsNullOrEmpty(value))
                {
                    try
                    {
                        _timeOnlyData = DateTimeUtil.GetDateTimeFromString(value, ConstDateTimeFormat.HHMMSS);
                    }
                    catch
                    {
                        _timeOnlyData = null;
                    }
                }
            }
        }
        public virtual int? RefreshTime1 { get; set; }
        public virtual int? RefreshTime2 { get; set; }
        public virtual int? RefreshTime3 { get; set; }
        public virtual int? RefreshTime4 { get; set; }

        string? _refreshTime5 { get; set; }
        public virtual string[]? RefreshTime5
        {
            get
            {
                if (_refreshTime5 != null)
                {
                    return _refreshTime5.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _refreshTime5 = string.Join(",", value);
                    }
                    catch
                    {
                        _refreshTime5 = null;
                    }
                }
                else
                {
                    _refreshTime5 = null;
                }
            }
        }
        public virtual double? Price { get; set; }
        public virtual int? Gender { get; set; }
        public virtual bool? Enable { get; set; }

        string? _checkBoxValues { get; set; }
        public virtual string[]? CheckBoxValues
        {
            get
            {
                if (_checkBoxValues != null)
                {
                    return _checkBoxValues.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _checkBoxValues = string.Join(",", value);
                    }
                    catch
                    {
                        _checkBoxValues = null;
                    }
                }
                else
                {
                    _checkBoxValues = null;
                }
            }
        }
        public virtual string? Avatar { get; set; }

        string? _listImage1 { get; set; }
        public virtual string[]? ListImage1
        {
            get
            {
                if (_listImage1 != null)
                {
                    return _listImage1.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _listImage1 = string.Join(",", value);
                    }
                    catch
                    {
                        _listImage1 = null;
                    }
                }
                else
                {
                    _listImage1 = null;
                }
            }
        }
        public virtual string? File1 { get; set; }

        string? _listFile1 { get; set; }
        public virtual string[]? ListFile1
        {
            get
            {
                if (_listFile1 != null)
                {
                    return _listFile1.Split(",", StringSplitOptions.RemoveEmptyEntries);
                }
                return null;
            }
            set
            {
                if (value != null && value.Length >= 1)
                {
                    try
                    {
                        _listFile1 = string.Join(",", value);
                    }
                    catch
                    {
                        _listFile1 = null;
                    }
                }
                else
                {
                    _listFile1 = null;
                }
            }
        }
        public virtual long? Example002Id { get; set; }
        public virtual Example002Entity? ItemExample002 { get; set; }
        public virtual List<Example003Entity>? ListExample003 { get; set; }
        
        public override object SetData(Example001Entity entity)
        {
            base.SetData(entity);
            this.Name = entity.Name;
            this.NameReadonly = entity.NameReadonly;
            this.Username = entity.Username;
            this.Description = entity.Description;
            this.Label1 = entity.Label1;
            if (!string.IsNullOrEmpty(entity.Password1))
            {
                this.Password1 = new string('*', entity.Password1.Length);
            }
            if (!string.IsNullOrEmpty(entity.Password2))
            {
                this.Password2 = new string('*', entity.Password2.Length);
            }
            this.Email1 = entity.Email1;
            this.PhoneNumber1 = entity.PhoneNumber1;
            this._startDate = entity.StartDate;
            this.StartDateTime = entity.StartDateTime;
            this._timeOnlyData = entity.TimeOnlyData;
            this.RefreshTime1 = entity.RefreshTime1;
            this.RefreshTime2 = entity.RefreshTime2;
            this.RefreshTime3 = entity.RefreshTime3;
            this.RefreshTime4 = entity.RefreshTime4;
            this._refreshTime5 = entity.RefreshTime5;
            this.Price = entity.Price;
            this.Gender = entity.Gender;
            this.Enable = entity.Enable;
            this._checkBoxValues = entity.CheckBoxValues;
            this.Avatar = entity.Avatar;
            this._listImage1 = entity.ListImage1;
            this.File1 = entity.File1;
            this._listFile1 = entity.ListFile1;
            this.Example002Id = entity.Example002Id;
            this.ItemExample002 = entity.ItemExample002;
            if (entity.ListExample003 != null)
            {
                this.ListExample003 = entity.ListExample003.Select(x => x).ToList();
            }
        
            return this;
        }
        public override List<object> SetData(List<Example001Entity> listEntity)
        {
            List<Object> listRS = new List<object>();
            foreach (Example001Entity entity in listEntity)
            {
                listRS.Add(new BaseExample001ResponseModel().SetData(entity));
            }
            return listRS;
        }
        public IQueryable<Example001Entity> PrepareWhereQueryFilter(
            IQueryable<Example001Entity> query,
            Dictionary<string, object> dicInputFieldKey2Value,
            Func<Dictionary<string, string>> getFieldAttributes,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            foreach (var keyVal in dicInputFieldKey2Value)
            {
                string inputFieldKey = keyVal.Key;
                if (!dicFieldAttr.ContainsKey(inputFieldKey))
                {
                    continue;
                }

                var fieldType = dicFieldAttr[inputFieldKey];
                object? searchValue = ConvertUtil.ConvertData(keyVal.Value, fieldType);
                if (searchValue == null)
                {
                    continue;
                }

                var propertyInfo = responseType.GetProperty(inputFieldKey);
                if (propertyInfo == null)
                {
                    continue;
                }

                query = query.WherePropertyEquals(inputFieldKey, searchValue);
            }
            return query;
        }

        public IQueryable<Example001Entity> PrepareQuerySort(
            IQueryable<Example001Entity> query,
            Dictionary<string, long> dicInputFieldKey2SortOrder,
            Func<Dictionary<string, string>> getFieldAttributes,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            foreach (var keyVal in dicInputFieldKey2SortOrder)
            {
                string inputFieldKey = keyVal.Key;

                var propertyInfo = responseType.GetProperty(inputFieldKey);
                if (propertyInfo == null)
                {
                    continue;
                }

                if (keyVal.Value == -1)
                {
                    query = query.OrderByPropertyDescending(inputFieldKey);
                }
                else
                {
                    query = query.OrderByPropertyAscending(inputFieldKey);
                }
            }
            return query;
        }
        public IQueryable<Example001Entity> PrepareWhereQuerySearch(
            IQueryable<Example001Entity> query,
            Dictionary<string, string> dicInputFieldKey2Value,
            Func<Dictionary<string, string>> getFieldAttributes,
            Func<Dictionary<string, string>> getFieldAttributesSearchAll,
            Type responseType)
        {
            var dicFieldAttr = getFieldAttributes();
            var dicFieldAttrSearchAll = getFieldAttributesSearchAll();
            var predicate = LinqKit.PredicateBuilder.New<Example001Entity>(true);
            bool searchAllFlag = false;
            foreach (var keyVal in dicInputFieldKey2Value)
            {
                string inputFieldKeyAll = keyVal.Key;
                if (inputFieldKeyAll.Trim().ToUpper() == "ALL")
                {
                    searchAllFlag = true;
                    string searchValue = ConvertUtil.GetString(keyVal.Value);
                    if (searchValue == null)
                    {
                        break;
                    }

                    foreach (var keyVal2 in dicFieldAttrSearchAll)
                    {
                        string inputFieldKey = keyVal2.Key;
                        predicate = this.GetPredicate(predicate, inputFieldKey, searchValue);
                    }
                    break;
                }
            }

            if (!searchAllFlag)
            {
                foreach (var keyVal in dicInputFieldKey2Value)
                {
                    string inputFieldKey = keyVal.Key;
                    if (!dicFieldAttr.ContainsKey(inputFieldKey))
                    {
                        continue;
                    }

                    var fieldType = dicFieldAttr[inputFieldKey];
                    string searchValue = ConvertUtil.GetString(keyVal.Value);
                    if (searchValue == null)
                    {
                        continue;
                    }

                    var propertyInfo = responseType.GetProperty(inputFieldKey);
                    if (propertyInfo == null)
                    {
                        continue;
                    }

                    predicate = this.GetPredicate(predicate, inputFieldKey, searchValue);
                }
            }
            return query.Where(predicate).AsQueryable();
        }

        public virtual ExpressionStarter<Example001Entity> GetPredicate(ExpressionStarter<Example001Entity> predicate, string inputFieldKey, string searchValue)
        {
            if (inputFieldKey == nameof(BaseExample001ResponseModel.Id))
            {
                predicate = predicate.Or(x => EF.Functions.Unaccent(x.Id.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue.ToLower()}")));
            }
            else if (inputFieldKey == nameof(BaseExample001ResponseModel.Order))
            {
                predicate = predicate.Or(x => EF.Functions.Unaccent(x.Order.ToString().ToLower()).Contains(EF.Functions.Unaccent($"{searchValue.ToLower()}")));
            }
            return predicate;
        }

        public virtual Dictionary<string, string> GetFieldAttributes()
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            dic.Add(nameof(BaseExample001ResponseModel.Name), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.NameReadonly), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Username), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Description), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Label1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Password1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Password2), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Email1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.PhoneNumber1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.StartDate), typeof(DateTime).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.StartDateTime), typeof(DateTime).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.TimeOnlyData), typeof(DateTime).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime1), typeof(int).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime2), typeof(int).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime3), typeof(int).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime4), typeof(int).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime5), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Price), typeof(double).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Enable), typeof(bool).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.CheckBoxValues), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Avatar), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.ListImage1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.File1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.ListFile1), typeof(string).ToString());
                    

            return dic;
        }

        public virtual Dictionary<string, string> GetFieldAttributesSearchAll()
        {
            Dictionary<string, string> dic = new Dictionary<string, string>();
            dic.Add(nameof(BaseExample001ResponseModel.Name), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.NameReadonly), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Username), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Description), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Label1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Password1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Password2), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Email1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.PhoneNumber1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.StartDate), typeof(DateTime).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.StartDateTime), typeof(DateTime).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.TimeOnlyData), typeof(DateTime).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime1), typeof(int).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime2), typeof(int).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime3), typeof(int).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime4), typeof(int).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.RefreshTime5), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Price), typeof(double).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Enable), typeof(bool).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.CheckBoxValues), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.Avatar), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.ListImage1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.File1), typeof(string).ToString());
            dic.Add(nameof(BaseExample001ResponseModel.ListFile1), typeof(string).ToString());
                    

            return dic;
        }

        public virtual List<ColumnResponseModel> GetColumnAttribute()
        {
            List<ColumnResponseModel> columns = new List<ColumnResponseModel>();
            columns.Add(new ColumnResponseModel(
                nameof(BaseExample001ResponseModel.Id),
                nameof(BaseExample001ResponseModel.Id),
                true, true, true
                ));

            return columns;
        }
    }
}
