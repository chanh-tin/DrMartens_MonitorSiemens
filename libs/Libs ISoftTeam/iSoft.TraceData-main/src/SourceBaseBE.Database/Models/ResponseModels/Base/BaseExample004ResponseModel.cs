// -----------------------------------------------------------------------------
// This file was automatically generated.
// Please do not edit this file manually.
//
// Generated Date: 
//
// -----------------------------------------------------------------------------

using iSoft.Common.Utils;
using SourceBaseBE.Database.Entities;
using static iSoft.Common.ConstCommon;
using iSoft.Common.Enums;
using SourceBaseBE.Database.Enums;
using Microsoft.EntityFrameworkCore;
using PRPO.Database.Helpers;
using SourceBaseBE.Database.Models.RequestModels;
using iSoft.Common.Models.ResponseModels;
using Newtonsoft.Json;

namespace SourceBaseBE.Database.Models.ResponseModels
{
    public class BaseExample004ResponseModel : BaseCRUDResponseModel<Example004Entity>
    {
        public virtual string? Name { get; set; }
        public virtual string? Field { get; set; }

        public override object SetData(Example004Entity entity)
        {
            base.SetData(entity);
            this.Name = entity.Name;
            this.Field = entity.Field;

            return this;
        }
        public override List<object> SetData(List<Example004Entity> listEntity)
        {
            List<Object> listRS = new List<object>();
            foreach (Example004Entity entity in listEntity)
            {
                listRS.Add(new BaseExample004ResponseModel().SetData(entity));
            }
            return listRS;
        }
        //* prepare query list with where clause
        public static IQueryable<Example004Entity> PrepareWhereQueryFilter(IQueryable<Example004Entity> query, Dictionary<string, object> param)
        {
            var properties = JsonPropertyHelper<Example004Entity>.GetJsonPropertyNames();
            var predicate = LinqKit.PredicateBuilder.New<Example004Entity>(true); // Sử dụng thư viện linqkit
            foreach (var property in param)
            {
                string key = property.Key.ToLower();
                if (param.ContainsKey(key))
                {
                    //GEN
                }
            }
            return query.Where(predicate).AsQueryable();
        }
        public static IQueryable<Example004Entity> PrepareWhereQuerySearch(IQueryable<Example004Entity> query,
            SearchModel searchModel)
        {
            var predicate = LinqKit.PredicateBuilder.New<Example004Entity>(true); // Sử dụng thư viện linqkit
            var dicSearch = searchModel.DicSearch;
            var searchKey = searchModel.SearchStr?.Trim();
            foreach (var search in dicSearch)
            {
                var key = search.Key.ToLower();
                var searchValue = dicSearch[key].ToString().Trim();
                //GEN
            }
            if (!string.IsNullOrWhiteSpace(searchKey))
            {
                //GEN
            }
            return query.Where(predicate);
        }
        public static IQueryable<Example004Entity> PrepareQuerySort(IQueryable<Example004Entity> query, Dictionary<string, long> param)
        {
            var properties = JsonPropertyHelper<DashboardResponseModel>.GetJsonPropertyNames();
            properties.RemoveAll(p => p == null);
            foreach (var pa in param)
            {
                //GEN
            }
            return query;
        }
        public static List<ColumnResponseModel> AddKeySearchFilterable(List<ColumnResponseModel> datas)
        {
            var properties = JsonPropertyHelper<BaseExample004ResponseModel>.GetJsonPropertyNames();

            foreach (var data in datas)
            {
                if (properties.Contains(data.Key))
                {
                    string key = data.Key.ToLower();
                    //* add flag_filterable
                    // Add column for able
                    data.Filterable = true;
                    data.Searchable = true;

                }
            }

            return datas;
        }
    }
}
