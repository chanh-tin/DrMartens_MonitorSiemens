// -----------------------------------------------------------------------------
// This file was automatically generated.
// Please do not edit this file manually.
//
// Generated Date: 
//
// -----------------------------------------------------------------------------

using iSoft.Common.ConfigsNS;
using SourceBaseBE.Database.Repository;
using SourceBaseBE.Database.DBContexts;
using System;
using System.Data;
using iSoft.Common.Models.RequestModels;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using iSoft.Database.Extensions;
using SourceBaseBE.Database.Entities;
using static iSoft.Common.ConstCommon;
using iSoft.Common;
using iSoft.Common.Enums;
using iSoft.Database.Models;
using Microsoft.Extensions.Logging;
using iSoft.Common.Utils;
using SourceBaseBE.Database.Models.ResponseModels;
using System.IO.Compression;
using System.IO;
using System.Reflection;
using iSoft.Common.Models.ResponseModel;
using iSoft.Redis.Services;
using iSoft.ExportLibrary.Services;
using iSoft.ExportLibrary.Models;
using iSoft.AspNetCore.Services.Base.BaseCRUD;
using iSoft.Database.Entities;
using iSoft.AspNetCore.RabbitMQ;
using iSoft.AspNetCore.Enums;
using iSoft.Database.Models.ResponseModels;
using SourceBaseBE.Database.Enums;
using iSoft.Common.Exceptions;
using iSoft.AspNetCore.CommonFunc;
using iSoft.Database.Repository;

namespace SourceBaseBE.MainService.Services
{
    public class BaseExample001Service : BaseCRUDService<Example001Entity>
    {
        protected CommonDBContext _dbContextImp;
        protected BaseExample001Repository _repositoryBase;
        protected Example001TransRepository _example001TransRepository;
        protected Example002Repository _example002Repository;
        protected Example003Repository _example003Repository;
        protected LanguageSupportRepository _languageSupportRepository;


        public BaseExample001Service()
        {
        }
        public BaseExample001Service(
            CommonDBContext dbContext,
            ILogger logger
            )
            : base(dbContext, logger)
        {
            _dbContextImp = dbContext;
            _repositoryCRUD = new BaseExample001Repository(dbContext);
            _repositoryBase = (BaseExample001Repository)_repositoryCRUD;
            this._example001TransRepository = new Example001TransRepository(dbContext);
            this._example002Repository = new Example002Repository(dbContext);
            this._example003Repository = new Example003Repository(dbContext);
            this._languageSupportRepository = new LanguageSupportRepository(dbContext);

        }
        public override string GetServiceName()
        {
            return nameof(BaseExample001Service);
        }

        //* SyncServiceTransit flag
        public override bool IsSyncServiceTransit
        {
            get { return false; }
        }

        //* multiLanguage flag
        public override bool IsMultiLanguage
        {
            get { return false; }
        }
        public override Example001Entity GetById(long id, bool isTracking = false)
        {
            var entity = base.GetById(id, isTracking);
            return entity;
        }
        public override List<Example001Entity> GetList(PagingRequestModel pagingReq = null, bool isDirect = false, bool isTracking = false)
        {
            var list = base.GetList(pagingReq, isDirect, isTracking);
            return list;
        }
        public virtual PagingWithColumnsResponseModel GetListFilter(
            PagingFilterRequestModel request,
            bool isDirect = false,
            bool isTracking = false)
        {
            var (list, totalRecord) = _repositoryBase.GetListFilter(request, isDirect, isTracking);

            PagingWithColumnsResponseModel rs = new PagingWithColumnsResponseModel();
            List<Example001ResponseModel> listItemResponse = new Example001ResponseModel().SetData(list).Cast<Example001ResponseModel>().ToList();

            //* get column language
            var columns = new Example001ResponseModel().GetColumnAttribute();

            this.TranslateData(columns, request.Lang, nameof(Example001Entity));

            rs.ListData = listItemResponse.Cast<object>().ToList();
            rs.TotalRecord = totalRecord;
            rs.Columns = columns;

            return rs;
        }

        public virtual string ExportData(PagingFilterRequestModel request)
        {
            var templatePath = ConstDRMTMain.ConstTemplateExportDefault;
            string reportTemplateSheet = "sheet1";
            string excelFileNameTemplate = $"Report_{DateTime.UtcNow.ToString(ConstDateTimeFormat.YYYYMMDD_HHMMSS_MIN)}.xlsx";
            string zipFileName = $"Report_{DateTime.UtcNow.ToString(ConstDateTimeFormat.YYYYMMDD_HHMMSS_MIN)}.zip";
            using (var outStream = new MemoryStream())
            {
                using (var archive = new ZipArchive(outStream, ZipArchiveMode.Create, true))
                {
                    var excelFileName = string.Format(excelFileNameTemplate, request.DateFrom?.ToString("yyyyMMdd"), request.DateTo?.ToString("yyyyMMdd"));
                    var excelFilePath = $"./{excelFileName}";
                    bool isTemplateExist = File.Exists(templatePath);

                    _logger.LogInformation($"Template Path: {templatePath}");
                    _logger.LogInformation($"Template Path Exist: {isTemplateExist}");

                    ExcelPro._templatePath = templatePath;
                    using (var report = ExcelPro.LoadReportFormat())
                    {
                        var (list, totalRecord) = _repositoryBase.GetListFilter(request, false, false);
                        var listResponseModel = new BaseExample001ResponseModel().SetData(list).Cast<BaseExample001ResponseModel>().ToList();

                        var sheet1 = report.Workbook.Worksheets[reportTemplateSheet];
                        int rowCount = listResponseModel.Count;
                        int beginRowIndex = 2;
                        int insertEmptyRow = rowCount - 1;
                        double rowHeight = sheet1.Rows[beginRowIndex + 1].Height;

                        /************************************************************************/
                        /*                          INSERT EMPTY ROWS START                     */
                        /************************************************************************/
                        if (insertEmptyRow >= 1)
                        {
                            sheet1.InsertRow(beginRowIndex + 1, insertEmptyRow, beginRowIndex);
                            for (int i = 0; i < insertEmptyRow; i++)
                            {
                                sheet1.Rows[beginRowIndex + 1 + i].Height = rowHeight;
                            }
                        }
                        /*INSERT EMPTY ROWS END*/

                        /************************************************************************/
                        /*                          GET DATA TO listData START                  */
                        /************************************************************************/
                        int count = 0;

                        List<Dictionary<object, object>> listData = new List<Dictionary<object, object>>();
                        foreach (var item in listResponseModel)
                        {
                            var dic = new Dictionary<object, object>();

                            dic.Add("STT", ++count);

                            foreach (PropertyInfo property in typeof(BaseExample001ResponseModel).GetProperties().OrderBy(p => p.Name))
                            {
                                dic.Add(property.Name, property.GetValue(item));
                            }
                            listData.Add(dic);
                        }
                        /*GET DATA TO listData END*/

                        ExportSheetDataModel exportSheetDataModel = new ExportSheetDataModel();
                        exportSheetDataModel.SheetIndex = sheet1.Index;

                        /************************************************************************/
                        /*                          SET METADATA START                  */
                        /************************************************************************/
                        /*SET METADATA END*/

                        /************************************************************************/
                        /*                          SET DATA TO EXCEL START                  */
                        /************************************************************************/
                        exportSheetDataModel.BeginRowIndex = beginRowIndex;
                        exportSheetDataModel.BeginNoNumber = 1;
                        exportSheetDataModel.ListChartDataModel = listData;
                        int columnIndex = 0;

                        // Set header to excel
                        exportSheetDataModel.DicColumnIndex2EnvKey.Add(columnIndex++, "STT");
                        foreach (PropertyInfo property in typeof(BaseExample001ResponseModel).GetProperties().OrderBy(p => p.Name))
                        {
                            exportSheetDataModel.DicColumnIndex2EnvKey.Add(columnIndex++, property.Name);
                        }

                        string beginHeaderCellName = "A1";
                        string headerCellName = beginHeaderCellName;

                        exportSheetDataModel.DicCellName2Value.Add(headerCellName, "STT");
                        headerCellName = ConvertUtil.GetCellNext(headerCellName, Direct.Right, 1);

                        foreach (PropertyInfo property in typeof(BaseExample001ResponseModel).GetProperties().OrderBy(p => p.Name))
                        {
                            if (!exportSheetDataModel.DicCellName2Value.ContainsKey(headerCellName))
                            {
                                exportSheetDataModel.DicCellName2Value.Add(headerCellName, property.Name);
                                headerCellName = ConvertUtil.GetCellNext(headerCellName, Direct.Right, 1);
                            }
                        }

                        columnIndex++;
                        long insertedRowCount = ExportExcelService.SetFormatExcelHistory(
                              report.Workbook.Worksheets,
                              exportSheetDataModel);
                        /*SET DATA TO EXCEL END*/

                        var file = new FileInfo(excelFilePath);
                        report.SaveAs(file);
                        report.Dispose();
                        var fileInArchive = archive.CreateEntry(excelFileName, System.IO.Compression.CompressionLevel.Optimal);
                        using (var entryStream = fileInArchive.Open())
                        {
                            using (var fileInCompression = new MemoryStream(File.ReadAllBytes(excelFilePath)))
                            {
                                fileInCompression.CopyToAsync(entryStream);
                            }
                        }
                    }
                    return excelFilePath;
                }
            }
        }
        public override List<Example001Entity> GetAll()
        {
            var list = base.GetAll();
            return list;
        }
        public override List<Dictionary<string, object>> GetFormDataObjElement(
            Example001Entity entity,
            string lang = null,
            List<string> translateFields = null
            )
        {
            string entityName = nameof(Example001Entity);
            var listRS = new List<Dictionary<string, object>>();
            List<object> objectList = null;
            var properties = typeof(Example001Entity).GetProperties();
            bool addedFlag = false;
            foreach (var property in properties)
            {
                if (property.Name == nameof(BaseCRUDEntity.Id) && entity.IsNewEntity())
                {
                    continue;
                }

                if (property.Name == nameof(BaseCRUDEntity.CreatedAt)
                    || property.Name == nameof(BaseCRUDEntity.CreatedBy)
                    || property.Name == nameof(BaseCRUDEntity.UpdatedAt)
                    || property.Name == nameof(BaseCRUDEntity.UpdatedBy)
                    || property.Name == nameof(BaseCRUDEntity.CreatedUsername)
                    || property.Name == nameof(BaseCRUDEntity.UpdatedUsername)
                    || property.Name == nameof(BaseCRUDEntity.DeletedFlag)
                    || property.Name == nameof(BaseCRUDEntity.Order))
                {
                    continue;
                }

                if (false

                    )
                {
                    continue;
                }

                if (lang == null)
                {
                    if (translateFields == null)
                    {
                        // Get all fields
                    }
                    else
                    {
                        // Get common fields not in translateFields
                        if (!translateFields.Contains(property.Name))
                        {
                            continue;
                        }
                    }
                }
                else
                {
                    if (translateFields == null)
                    {
                        // Get all lang fields
                    }
                    else
                    {
                        // Get lang fields in translateFields
                        if (!translateFields.Contains(property.Name))
                        {
                            continue;
                        }
                    }
                }

                addedFlag = false;
                // foreignKeyAttribute
                var foreignKeyAttribute = (ForeignKeyAttribute)Attribute.GetCustomAttribute(property, typeof(ForeignKeyAttribute));
                if (foreignKeyAttribute != null && !addedFlag)
                {
                    bool isReadonly = false;
                    if (!entity.IsNewEntity())
                    {
                        FormDataTypeAttribute formDataTypeAttr_f = null;
                        formDataTypeAttr_f = (FormDataTypeAttribute)Attribute.GetCustomAttribute(property, typeof(FormDataTypeAttribute));
                        isReadonly = formDataTypeAttr_f != null ? formDataTypeAttr_f.IsReadonly : false;
                    }

                    string parentEntity = foreignKeyAttribute.Name;
                    listRS.Add(new Dictionary<string, object> {
                        {"DisplayName", GetDisplayName(property.Name, entityName)},
                        {"Key", property.Name},
                        {"Value", property.GetValue(entity)},
                        {"Type", EnumFormDataType.Select.ToStringValue()},
                        {"Options", GetListOptionData(parentEntity, entityName)},
                        {"IsReadonly", isReadonly},
                        {"Searchable", true},
                        {"Required", false},
                        {"Lang", lang },
                    });
                    addedFlag = true;
                }

                // ListEntityAttribute
                var listEntityAttribute = (ListEntityAttribute)Attribute.GetCustomAttribute(property, typeof(ListEntityAttribute));
                if (listEntityAttribute != null && !addedFlag)
                {
                    string childEntity = listEntityAttribute.EntityTargetName;

                    listRS.Add(new Dictionary<string, object> {
                        {"DisplayName", GetDisplayName(property.Name, entityName)},
                        {"Key", property.Name},
                        {"Value", GetListIdChildren(entity, childEntity)},
                        {"Type", listEntityAttribute.TypeName.ToStringValue()},
                        {"Options", GetListOptionData(childEntity, entityName, listEntityAttribute.Category)},
                        {"IsReadonly", false},
                        {"Searchable", true},
                        {"Required", false},
                        {"Lang", lang },
                    });
                    addedFlag = true;
                }

                // ListEntityAttribute
                var formDataTypeAttr = (FormDataTypeAttribute)Attribute.GetCustomAttribute(property, typeof(FormDataTypeAttribute));

                if (formDataTypeAttr == null && !addedFlag)
                {
                    if (property.PropertyType == typeof(string) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(string))
                    {
                        formDataTypeAttr = new FormDataTypeAttributeText(EnumFormDataType.Textbox);
                    }
                    else if (property.PropertyType == typeof(DateTime) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(DateTime))
                    {
                        formDataTypeAttr = new FormDataTypeAttributeDatetime(EnumFormDataType.Datetime);
                    }
                    else if (property.PropertyType == typeof(int) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(int)
                      || property.PropertyType == typeof(long) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(long)
                      || property.PropertyType == typeof(short) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(short))
                    {
                        formDataTypeAttr = new FormDataTypeAttributeNumber(EnumFormDataType.IntegerNumber);
                    }
                    else if (property.PropertyType == typeof(float) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(float)
                        || property.PropertyType == typeof(double) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(double))
                    {
                        formDataTypeAttr = new FormDataTypeAttributeNumber(EnumFormDataType.FloatNumber);
                    }
                    else if (property.PropertyType == typeof(bool) || Nullable.GetUnderlyingType(property.PropertyType) == typeof(bool))
                    {
                        formDataTypeAttr = new FormDataTypeAttributeSelect(EnumFormDataType.Checkbox, new object[] { true, false });
                    }

                    else if (property.PropertyType.IsAssignableFrom(typeof(BaseCRUDEntity)) || typeof(BaseCRUDEntity).IsAssignableFrom(property.PropertyType))
                    {
                        // Do nothing
                    }
                    else
                    {
                        //throw new NotImplementedException($"Unknown property: {property.PropertyType}");
                    }
                }

                if (formDataTypeAttr != null && !addedFlag)
                {
                    if (formDataTypeAttr.Options != null)
                    {
                        objectList = new List<object>(formDataTypeAttr.Options);
                    }
                    string value = "";
                    switch (formDataTypeAttr.TypeName)
                    {
                        case EnumFormDataType.IntegerNumber:
                        case EnumFormDataType.FloatNumber:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Min", formDataTypeAttr.Min},
                                {"Max", formDataTypeAttr.Max},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"Unit", formDataTypeAttr.Unit},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"ValidationRules", formDataTypeAttr.ValidationRules},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.Textbox:
                        case EnumFormDataType.Textarea:
                        case EnumFormDataType.Email:
                        case EnumFormDataType.PhoneNumber:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"PlaceHolder", formDataTypeAttr.Placeholder},
                                {"MaxRow", formDataTypeAttr.MaxRow},
                                {"MaxLen", formDataTypeAttr.MaxLen},
                                {"Unit", formDataTypeAttr.Unit},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"ValidationRules", formDataTypeAttr.ValidationRules},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.Password:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity) == null ? null : new string('*', property.GetValue(entity).ToString().Length)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"PlaceHolder", formDataTypeAttr.Placeholder},
                                {"MaxRow", formDataTypeAttr.MaxRow},
                                {"MaxLen", formDataTypeAttr.MaxLen},
                                {"Unit", formDataTypeAttr.Unit},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"ValidationRules", formDataTypeAttr.ValidationRules},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.Label:
                        case EnumFormDataType.Hidden:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Unit", formDataTypeAttr.Unit},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.Datetime:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Min", formDataTypeAttr.Min},
                                {"Max", formDataTypeAttr.Max},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.DateOnly:
                            value = property.GetValue(entity) == null ? "" : ((DateTime)property.GetValue(entity)).ToString(ConstDateTimeFormat.YYYYMMDD);
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value",value },
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Min", formDataTypeAttr.Min},
                                {"Max", formDataTypeAttr.Max},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.TimeOnly:
                            value = property.GetValue(entity) == null ? "" : ((string)property.GetValue(entity));
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value",value },
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Min", formDataTypeAttr.Min},
                                {"Max", formDataTypeAttr.Max},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.Radio:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Options", GetListOptionData(objectList)},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"Unit", formDataTypeAttr.Unit},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.Checkbox:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Options", null},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"Unit", formDataTypeAttr.Unit},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.CheckboxMulti:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", GetListValueData(property.GetValue(entity)?.ToString())},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Options", GetListOptionData(objectList)},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"Unit", formDataTypeAttr.Unit},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.Select:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Options", GetListOptionData(objectList)},
                                {"Searchable", formDataTypeAttr.Searchable},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.SelectMulti:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", GetListValueData(property.GetValue(entity)?.ToString())},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Options", GetListOptionData(objectList)},
                                {"Searchable", formDataTypeAttr.Searchable},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.HourOnly:
                        case EnumFormDataType.Timespan:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Min", formDataTypeAttr.Min},
                                {"Max", formDataTypeAttr.Max},
                                {"MinLevelDateTime", formDataTypeAttr.MinLevelDateTime?.ToString()},
                                {"MaxLevelDateTime", formDataTypeAttr.MaxLevelDateTime?.ToString()},
                                {"DefaultValue", formDataTypeAttr.DefaultVal},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Unit", formDataTypeAttr.Unit},
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.Image:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"Width", formDataTypeAttr.Width},
                                {"Height", formDataTypeAttr.Height},
                                {"MaxFileSizeInMB", formDataTypeAttr.MaxFileSizeInMB},
                                {"FileExtension", formDataTypeAttr.FileExtension},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.ListImage:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", GetListValueData(property.GetValue(entity)?.ToString())},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"MaxFileSizeInMB", formDataTypeAttr.MaxFileSizeInMB},
                                {"FileExtension", formDataTypeAttr.FileExtension},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.File:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", property.GetValue(entity)},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"MaxFileSizeInMB", formDataTypeAttr.MaxFileSizeInMB},
                                {"FileExtension", formDataTypeAttr.FileExtension},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.ListFile:
                            listRS.Add(new Dictionary<string, object> {
                                {"DisplayName", GetDisplayName(property.Name, entityName)},
                                {"Key", property.Name},
                                {"Value", GetListValueData(property.GetValue(entity)?.ToString())},
                                {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                                {"MaxFileSizeInMB", formDataTypeAttr.MaxFileSizeInMB},
                                {"FileExtension", formDataTypeAttr.FileExtension},
                                {"IsReadonly", formDataTypeAttr.IsReadonly},
                                {"Required", formDataTypeAttr.IsRequired },
                                {"Lang", lang },
                            });
                            addedFlag = true;
                            break;
                        case EnumFormDataType.None:
                            addedFlag = true;
                            break;
                        default:
                            //listRS.Add(new Dictionary<string, object> {
                            //    {"DisplayName", GetDisplayName(property.Name, entityName)},
                            //    {"Key", property.Name},
                            //    {"Value", property.GetValue(item)},
                            //    {"Type", formDataTypeAttr.TypeName.ToStringValue()},
                            //    {"IsReadonly", formDataTypeAttr.IsReadonly},
                            //});
                            //addedFlag = true;
                            throw new NotImplementedException($"EnumFormDataType not found, {formDataTypeAttr.TypeName.ToString()}");
                            break;
                    }
                }
            }

            var dicFieldName2Index = new Example001ResponseModel().GetColumnAttribute()
                                                                .Select((x, index) => new { x.Key, index })
                                                                .ToDictionary(x => x.Key, x => x.index);
            listRS.Sort((x, y) =>
            {
                string keyX = x["Key"].ToString();
                string keyY = y["Key"].ToString();
                if (!dicFieldName2Index.ContainsKey(keyX))
                {
                    return 1;
                }
                if (!dicFieldName2Index.ContainsKey(keyY))
                {
                    return -1;
                }
                return dicFieldName2Index[keyX.ToString()].CompareTo(dicFieldName2Index[keyY.ToString()]);
            });
            return listRS;
        }

        public override List<Dictionary<string, object>> GetFormDataObjElementMultiLang(
            Example001Entity entity,
            string lang
            )
        {
            List<Dictionary<string, object>> listRS = new List<Dictionary<string, object>>();

            var listLangSupport = _languageSupportRepository.GetAll();

            Dictionary<string, bool> dicLang2ApplyFlag = listLangSupport.ToDictionary(x => x.Lang, x => false);

            var translateFields = this.GetTranslateFields();

            // Build form data for base data
            var listOneLang = this.GetFormDataObjElement(entity, null, null);
            listRS.AddRange(listOneLang);

            // Build form data for lang data
            foreach (var transEntity in entity.ListExample001Trans)
            {
                transEntity.ApplyTransDataTo(entity);

                listOneLang = this.GetFormDataObjElement(entity, transEntity.Lang, translateFields);

                listRS.AddRange(listOneLang);

                if (dicLang2ApplyFlag.ContainsKey(transEntity.Lang))
                {
                    dicLang2ApplyFlag[transEntity.Lang] = true;
                }
            }

            // Build form data for empty translate
            var defaultTransEntity = entity.ListExample001Trans.Where(x => x.Lang == lang).FirstOrDefault();
            if (defaultTransEntity != null)
            {
                defaultTransEntity.ApplyTransDataTo(entity);
            }
            foreach (var langSupport in listLangSupport)
            {
                if (dicLang2ApplyFlag.ContainsKey(langSupport.Lang)
                    && dicLang2ApplyFlag[langSupport.Lang] == false)
                {
                    listOneLang = this.GetFormDataObjElement(entity, langSupport.Lang, translateFields);

                    listRS.AddRange(listOneLang);

                    if (dicLang2ApplyFlag.ContainsKey(langSupport.Lang))
                    {
                        dicLang2ApplyFlag[langSupport.Lang] = true;
                    }
                }
            }

            return listRS;
        }
        /// <summary>
        /// UpsertIfNotExist (@GenCRUD)
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="userId"></param>
        /// <returns></returns>
        public override Example001Entity Upsert(Example001Entity entity, long? userId = null)
        {
            //List<Example001TransEntity> example001TransChildren = null;
            //if (entity.Example001TransIds != null && entity.Example001TransIds.Count >= 1)
            //{
            //    example001TransChildren = _example001TransRepository.GetListByListIds(entity.Example001TransIds, true, true);
            //    if (example001TransChildren == null || example001TransChildren.Count <= 0)
            //    {
            //        throw new DBException($"example001TransChildren not found, ids: {string.Join(",", entity.Example001TransIds)}");
            //    }
            //}

            List<Example003Entity> example003Children = null;
            if (entity.Example003Ids != null && entity.Example003Ids.Count >= 1)
            {
                example003Children = _example003Repository.GetListByListIds(entity.Example003Ids, true, true);
                if (example003Children == null || example003Children.Count <= 0)
                {
                    throw new DBException($"example003Children not found, ids: {string.Join(",", entity.Example003Ids)}");
                }
            }

            ((BaseExample001Repository)_repositoryBase).Upsert(entity, example003Children, userId);

            var upsertedEntity = ((BaseExample001Repository)_repositoryBase).GetById(entity.Id, false);

            if (this.IsSyncServiceTransit)
            {
                BaseRabbitMQImpService.Instance.SendServiceTransit(
                    entity,
                    userId: userId,
                    this._repositoryBase.TableName,
                    CommonFunction.GetCurrentProjectSerialCode(userId),
                    EnumServiceTransitAction.SyncDatabase_Upsert
                    );
            }

            return upsertedEntity;
        }
        public override int Delete(Example001Entity entity, long? userId = null, bool isSoftDelete = true)
        {
            var rs = base.Delete(entity, userId, isSoftDelete);

            return rs;
        }
        public override int Delete(long id, long? userId = null, bool isSoftDelete = true)
        {
            int deletedCount = base.Delete(id, userId, isSoftDelete);

            return deletedCount;
        }

        /// <summary>
        /// GetListIdChildren (@GenCRUD)
        /// </summary>
        /// <param name="entity"></param>
        /// <param name="childEntity"></param>
        /// <returns></returns>
        public virtual List<long> GetListIdChildren(Example001Entity entity, string childEntity)
        {
            switch (childEntity)
            {
                case nameof(Example001TransEntity):
                    if (entity.ListExample001Trans == null)
                    {
                        return new List<long>();
                    }
                    return entity.ListExample001Trans.Select(x => x.Id).ToList();

                case nameof(Example003Entity):
                    if (entity.ListExample003 == null)
                    {
                        return new List<long>();
                    }
                    return entity.ListExample003.Select(x => x.Id).ToList();


                default:
                    return new List<long>();
            }
        }

        /// <summary>
        /// GetListOptionData (@GenCRUD)
        /// </summary>
        /// <param name="targetEntity"></param>
        /// <param name="entityName"></param>
        /// <param name="category"></param>
        /// <returns></returns>
        public virtual List<FormSelectOptionModel> GetListOptionData(string targetEntity, string entityName, EnumAttributeRelationshipType category = EnumAttributeRelationshipType.Many2Many)
        {
            var listRS = new List<FormSelectOptionModel>();
            switch (targetEntity)
            {
                case nameof(Example001TransEntity):
                    listRS = this._example001TransRepository.GetSelectData(entityName, category);
                    break;

                case nameof(Example002Entity):
                    listRS = this._example002Repository.GetSelectData(entityName, category);
                    break;

                case nameof(Example003Entity):
                    listRS = this._example003Repository.GetSelectData(entityName, category);
                    break;

                default:
                    break;
            }
            return listRS;
        }
        public virtual Dictionary<string, List<OptionFilterResponseModel>> GetListOptionFilter()
        {
            try
            {
                Dictionary<string, List<OptionFilterResponseModel>> result = null;
                string cacheKey = $"{CommonConfig.ServiceName}_{GetServiceName()}_GetListOptionFilter";

                result = CachedFunc.GetRedisData<Dictionary<string, List<OptionFilterResponseModel>>>(cacheKey, null);

                if (result == null)
                {
                    result = new Dictionary<string, List<OptionFilterResponseModel>>();

                    List<OptionFilterResponseModel> listOption = null;
                    var columns = new Example001ResponseModel().GetColumnAttribute();
                    foreach (var column in columns)
                    {
                        if (column.Filterable != null && column.Filterable.Value == true)
                        {
                            switch (column.Key)
                            {
                                case nameof(Example001ResponseModel.Example002Name):
                                    listOption = _example002Repository.GetListWithNoInclude().Select(x =>
                                        new OptionFilterResponseModel(x.Id.ToString(), _example002Repository.GetDisplayField(x).ToString())).ToList();
                                    result.Add(column.Key, listOption);
                                    break;

                                default:
                                    break;
                            }
                        }
                    }
                    CachedFunc.AddEntityCacheKey(_example002Repository.GetRepositoryName(), cacheKey, false);


                    CachedFunc.SetRedisData(cacheKey, result, ConstCommon.ConstGetListCacheExpiredTimeInSeconds);
                }

                return result;
            }
            catch (Exception ex)
            {
                throw new Exception(ex.Message);
            }
        }

        public override Example001Entity SetFileURL(Example001Entity entity, Dictionary<string, string> dicImagePath)
        {
            if (dicImagePath != null && dicImagePath.Count >= 1)
            {
                if (dicImagePath.ContainsKey(nameof(Example001Entity.Avatar)))
                {
                    entity.Avatar = dicImagePath[nameof(Example001Entity.Avatar)];
                }
                List<string> listListImage1 = new List<string>();
                for (int i = 0; i < 1000; i++)
                {
                    string key = $"{nameof(Example001Entity.ListImage1)}{ConstCommon.ConstSeperatorFileKey}{i}";
                    if (dicImagePath.ContainsKey(key))
                    {
                        listListImage1.Add(dicImagePath[key]);
                    }
                    else
                    {
                        break;
                    }
                }
                entity.ListImage1 = string.Join(",", listListImage1);
                List<string> listListFile1 = new List<string>();
                for (int i = 0; i < 1000; i++)
                {
                    string key = $"{nameof(Example001Entity.ListFile1)}{ConstCommon.ConstSeperatorFileKey}{i}";
                    if (dicImagePath.ContainsKey(key))
                    {
                        listListFile1.Add(dicImagePath[key]);
                    }
                    else
                    {
                        break;
                    }
                }
                entity.ListFile1 = string.Join(",", listListFile1);
                if (dicImagePath.ContainsKey(nameof(Example001Entity.File1)))
                {
                    entity.File1 = dicImagePath[nameof(Example001Entity.File1)];
                }

            }
            return entity;
        }

        //public Example001Entity UpsertTestTransaction(Example001Entity item, long? userId = null)
        //{
        //  using (var transaction = this._dbContext.Database.BeginTransaction())
        //  {
        //    try
        //    {
        //      _repositoryBase...
        //      _userRepository...
        //      transaction.Commit();
        //    }
        //    catch (Exception ex)
        //    {
        //      try
        //      {
        //        transaction.Rollback();
        //      }
        //      catch { }
        //      throw new DBException(ex);
        //    }
        //  }
        //}

        public virtual List<string> GetTranslateFields()
        {
            var translateFields = new List<string>() {
                nameof(Example001Entity.Name),
                nameof(Example001Entity.Description),
            };

            return translateFields;
        }
    }
}